!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALERT	include/lager.hrl	/^-define(ALERT, 2).$/;"	d
CRASH_LOG	src/error_logger_lager_h.erl	/^-define(CRASH_LOG(Event),$/;"	d
CRITICAL	include/lager.hrl	/^-define(CRITICAL, 4).$/;"	d
DEBUG	include/lager.hrl	/^-define(DEBUG, 128).$/;"	d
DEFAULT_CHECK_INTERVAL	src/lager_file_backend.erl	/^-define(DEFAULT_CHECK_INTERVAL, 1000).$/;"	d
DEFAULT_HANDLER_CONF	src/lager_app.erl	/^-define(DEFAULT_HANDLER_CONF,$/;"	d
DEFAULT_LOG_LEVEL	src/lager_file_backend.erl	/^-define(DEFAULT_LOG_LEVEL, info).$/;"	d
DEFAULT_ROTATION_COUNT	src/lager_file_backend.erl	/^-define(DEFAULT_ROTATION_COUNT, 5).$/;"	d
DEFAULT_ROTATION_DATE	src/lager_file_backend.erl	/^-define(DEFAULT_ROTATION_DATE, "$D0"). %% midnight$/;"	d
DEFAULT_ROTATION_SIZE	src/lager_file_backend.erl	/^-define(DEFAULT_ROTATION_SIZE, 10485760). %% 10mb$/;"	d
DEFAULT_SINK	include/lager.hrl	/^-define(DEFAULT_SINK, lager_event).$/;"	d
DEFAULT_SYNC_INTERVAL	src/lager_file_backend.erl	/^-define(DEFAULT_SYNC_INTERVAL, 1000).$/;"	d
DEFAULT_SYNC_LEVEL	src/lager_file_backend.erl	/^-define(DEFAULT_SYNC_LEVEL, error).$/;"	d
DEFAULT_SYNC_SIZE	src/lager_file_backend.erl	/^-define(DEFAULT_SYNC_SIZE, 1024*64). %% 64kb$/;"	d
DEFAULT_TRACER	include/lager.hrl	/^-define(DEFAULT_TRACER, lager_default_tracer).$/;"	d
DEFAULT_TRUNCATION	include/lager.hrl	/^-define(DEFAULT_TRUNCATION, 4096).$/;"	d
DIALYZER_APPS	Makefile	/^DIALYZER_APPS = kernel stdlib erts sasl eunit syntax_tools compiler crypto \\$/;"	m
DIALYZER_FLAGS	tools.mk	/^DIALYZER_FLAGS ?= -Wunmatched_returns$/;"	m
EMERGENCY	include/lager.hrl	/^-define(EMERGENCY, 1).$/;"	d
ERROR	include/lager.hrl	/^-define(ERROR, 8).$/;"	d
ERROR_LOGGER_SINK	include/lager.hrl	/^-define(ERROR_LOGGER_SINK, error_logger_lager_event).$/;"	d
ETS_TABLE	src/lager_backend_throttle.erl	/^-define(ETS_TABLE, async_threshold_test).$/;"	d
ExpectedPart	test/pr_stacktrace_test.erl	/^ExpectedPart = "$/;"	f	module:pr_stacktrace_test
FILENAMES	src/lager_app.erl	/^-define(FILENAMES, '__lager_file_backend_filenames').$/;"	d
GLOBAL	src/lager_config.erl	/^-define(GLOBAL, '_global').$/;"	d
INFO	include/lager.hrl	/^-define(INFO, 64).$/;"	d
INT_LOG	include/lager.hrl	/^-define(INT_LOG(Level, Format, Args),$/;"	d
LAGER_MD_KEY	src/lager.erl	/^-define(LAGER_MD_KEY, '__lager_metadata').$/;"	d
LEVEL2NUM	include/lager.hrl	/^-define(LEVEL2NUM(Level),$/;"	d
LEVELS	include/lager.hrl	/^-define(LEVELS,$/;"	d
LEVELS_UNSAFE	include/lager.hrl	/^-define(LEVELS_UNSAFE,$/;"	d
LOCAL_PLT	tools.mk	/^LOCAL_PLT = .local_dialyzer_plt$/;"	m
LOGFMT	src/error_logger_lager_h.erl	/^-define(LOGFMT(Sink, Level, Pid, Fmt, Args),$/;"	d
LOGMSG	src/error_logger_lager_h.erl	/^-define(LOGMSG(Sink, Level, Pid, Msg),$/;"	d
LOG_NONE	include/lager.hrl	/^-define(LOG_NONE, 0).$/;"	d
NOTICE	include/lager.hrl	/^-define(NOTICE, 32).$/;"	d
NOTIFY	include/lager.hrl	/^-define(NOTIFY(Level, Pid, Format, Args),$/;"	d
NUM2LEVEL	include/lager.hrl	/^-define(NUM2LEVEL(Num),$/;"	d
PLT	tools.mk	/^PLT ?= $(HOME)\/.combo_dialyzer_plt$/;"	m
PROJECT	tools.mk	/^PROJECT ?= $(shell basename `find src -name "*.app.src"` .app.src)$/;"	m
QC_OUT	test/trunc_io_eqc.erl	/^-define(QC_OUT(P),$/;"	d
REBAR	tools.mk	/^REBAR ?= .\/rebar$/;"	m
REVISION	tools.mk	/^REVISION ?= $(shell git rev-parse --short HEAD)$/;"	m
ROTATE_TIMEOUT	src/lager.erl	/^-define(ROTATE_TIMEOUT, 100000).$/;"	d
SHOULD_LOG	include/lager.hrl	/^-define(SHOULD_LOG(Level),$/;"	d
SHOULD_LOG	include/lager.hrl	/^-define(SHOULD_LOG(Sink, Level),$/;"	d
TBL	src/lager_config.erl	/^-define(TBL, lager_config).$/;"	d
TERSE_FORMAT	src/lager_common_test_backend.erl	/^-define(TERSE_FORMAT,[time, " ", color, "[", severity,"] ", message]).$/;"	d
TERSE_FORMAT	src/lager_console_backend.erl	/^-define(TERSE_FORMAT,[time, " ", color, "[", severity,"] ", message]).$/;"	d
TEST_SINK_EVENT	test/lager_manager_killer_test.erl	/^-define(TEST_SINK_EVENT, '__lager_test_sink_lager_event'). %% <-- used by lager API calls and internals for gen_event$/;"	d
TEST_SINK_EVENT	test/lager_test_backend.erl	/^-define(TEST_SINK_EVENT, '__lager_test_sink_lager_event'). %% <-- used by lager API calls and internals for gen_event$/;"	d
TEST_SINK_NAME	test/lager_manager_killer_test.erl	/^-define(TEST_SINK_NAME, '__lager_test_sink').              %% <-- used by parse transform$/;"	d
TEST_SINK_NAME	test/lager_test_backend.erl	/^-define(TEST_SINK_NAME, '__lager_test_sink').              %% <-- used by parse transform$/;"	d
THROTTLE	src/lager_app.erl	/^-define(THROTTLE, lager_backend_throttle).$/;"	d
TOGGLE_ASYNC	src/lager_backend_throttle.erl	/^-define(TOGGLE_ASYNC(), test_increment(async_toggled)).$/;"	d
TOGGLE_ASYNC	src/lager_backend_throttle.erl	/^-define(TOGGLE_ASYNC(), true).$/;"	d
TOGGLE_SYNC	src/lager_backend_throttle.erl	/^-define(TOGGLE_SYNC(), test_increment(sync_toggled)).$/;"	d
TOGGLE_SYNC	src/lager_backend_throttle.erl	/^-define(TOGGLE_SYNC(), true).$/;"	d
TRACE_SINK	src/lager.erl	/^-define(TRACE_SINK, '__trace_sink').$/;"	d
WARNING	include/lager.hrl	/^-define(WARNING, 16).$/;"	d
a	test/compress_pr_record_test.erl	/^-record(a, {field1, field2, foo, bar, baz, zyu, zix}).$/;"	r
a	test/pr_nested_record_test.erl	/^-record(a, {field1 :: term(), field2 :: term()}).$/;"	r
add_configured_traces	src/lager_app.erl	/^add_configured_traces() ->$/;"	f	module:lager_app
add_secs	src/lager_file_backend.erl	/^add_secs({Mega, Secs, Micro}, Add) ->$/;"	f	module:lager_file_backend
add_trace_to_loglevel_config	src/lager.erl	/^add_trace_to_loglevel_config(Trace, Sink) ->$/;"	f	module:lager
adjust	src/lager_format.erl	/^adjust(Data, Pad, left) -> [Data|Pad];$/;"	f	module:lager_format
adjust	src/lager_format.erl	/^adjust(Data, Pad, right) -> [Pad|Data].$/;"	f	module:lager_format
adjust	src/lager_format.erl	/^adjust(Data, [], _) -> Data;$/;"	f	module:lager_format
alist	src/lager_trunc_io.erl	/^alist(H, _Max, _Options) ->$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([H|T], Max, #print_options{force_strings=true} = Options) when is_integer(H) ->$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([H|T], Max, Options = #print_options{force_strings=false,lists_as_strings=true}) when H =:= $"; H =:= $\\\\ ->$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([H|T], Max, Options = #print_options{force_strings=true}) when is_binary(H); is_list(H) ->$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([H|T], Max, Options) when H =:= $\\t; H =:= $\\n; H =:= $\\r; H =:= $\\v; H =:= $\\e; H=:= $\\f; H=:= $\\b ->$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([H|T], Max, Options) when is_integer(H), H >= 16#20, H =< 16#7e ->     % definitely printable$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([H|T], Max, Options) when is_integer(H), H >= 16#a0, H =< 16#ff ->     % definitely printable$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([H|_L], _Max, _Options) ->$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([], _Max, #print_options{force_strings=true}) -> {"", 0};$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist([], _Max, _Options) -> {"\\"", 1};$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist(_, Max, #print_options{force_strings=false}) when Max < 5 -> {"...\\"", 4};$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist(_, Max, #print_options{force_strings=true}) when Max < 4 -> {"...", 3};$/;"	f	module:lager_trunc_io
alist	src/lager_trunc_io.erl	/^alist(_, _, #print_options{force_strings=true}) ->$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start(L, Max, #print_options{force_strings=true} = Options) ->$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start(L, Max, Options) ->$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start([H|T], Max, Options) when H =:= $\\t; H =:= $\\n; H =:= $\\r; H =:= $\\v; H =:= $\\e; H=:= $\\f; H=:= $\\b ->$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start([H|T], Max, Options) when is_integer(H), H >= 16#20, H =< 16#7e ->  % definitely printable$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start([H|T], Max, Options) when is_integer(H), H >= 16#a0, H =< 16#ff ->  % definitely printable$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start([], _Max, #print_options{force_strings=true}) -> {"", 0};$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start([], _Max, _Options) -> {"[]", 2};$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start(_, Max, _Options) when Max < 4 -> {"...", 3};$/;"	f	module:lager_trunc_io
alist_start	src/lager_trunc_io.erl	/^alist_start(_, _Max, #print_options{depth=0}) -> {"[...]", 5};$/;"	f	module:lager_trunc_io
analyze_exception	src/lager_stdlib.erl	/^analyze_exception(_Class, Term, Stack) ->$/;"	f	module:lager_stdlib
analyze_exception	src/lager_stdlib.erl	/^analyze_exception(error, Term, Stack) ->$/;"	f	module:lager_stdlib
application_config_mangling_test_	src/lager_app.erl	/^application_config_mangling_test_() ->$/;"	f	module:lager_app
argss	src/lager_stdlib.erl	/^argss(0) ->$/;"	f	module:lager_stdlib
argss	src/lager_stdlib.erl	/^argss(1) ->$/;"	f	module:lager_stdlib
argss	src/lager_stdlib.erl	/^argss(2) ->$/;"	f	module:lager_stdlib
argss	src/lager_stdlib.erl	/^argss(I) ->$/;"	f	module:lager_stdlib
async_threshold_test_	test/lager_test_backend.erl	/^async_threshold_test_() ->$/;"	f	module:lager_test_backend
atom_needs_quoting	src/lager_trunc_io.erl	/^atom_needs_quoting([H|T]) when (H >= $a andalso H =< $z);$/;"	f	module:lager_trunc_io
atom_needs_quoting	src/lager_trunc_io.erl	/^atom_needs_quoting([]) ->$/;"	f	module:lager_trunc_io
atom_needs_quoting	src/lager_trunc_io.erl	/^atom_needs_quoting(_) ->$/;"	f	module:lager_trunc_io
atom_needs_quoting_start	src/lager_trunc_io.erl	/^atom_needs_quoting_start([H|T]) when H >= $a, H =< $z ->$/;"	f	module:lager_trunc_io
atom_needs_quoting_start	src/lager_trunc_io.erl	/^atom_needs_quoting_start(_) ->$/;"	f	module:lager_trunc_io
atom_quoting_test	src/lager_trunc_io.erl	/^atom_quoting_test() ->$/;"	f	module:lager_trunc_io
b	test/pr_nested_record_test.erl	/^-record(b, {field1 :: term() , field2 :: term()}).$/;"	r
bad_arg	test/pr_stacktrace_test.erl	/^bad_arg() ->$/;"	f	module:pr_stacktrace_test
bad_arity	test/pr_stacktrace_test.erl	/^bad_arity() ->$/;"	f	module:pr_stacktrace_test
base	src/lager_format.erl	/^base(B) when is_integer(B) ->$/;"	f	module:lager_format
base	src/lager_format.erl	/^base(none) ->$/;"	f	module:lager_format
basic_test_	src/lager_default_formatter.erl	/^basic_test_() ->$/;"	f	module:lager_default_formatter
binary_printing_test	src/lager_trunc_io.erl	/^binary_printing_test() ->$/;"	f	module:lager_trunc_io
bitstring_printing_test	src/lager_trunc_io.erl	/^bitstring_printing_test() ->$/;"	f	module:lager_trunc_io
boot	src/lager_app.erl	/^boot('__all_extra') ->$/;"	f	module:lager_app
boot	src/lager_app.erl	/^boot('__traces') ->$/;"	f	module:lager_app
boot	src/lager_app.erl	/^boot() ->$/;"	f	module:lager_app
boot	src/lager_app.erl	/^boot(?DEFAULT_SINK) -> boot();$/;"	f	module:lager_app
boot	src/lager_app.erl	/^boot(Sink) ->$/;"	f	module:lager_app
boot_sink	src/lager_app.erl	/^boot_sink(Sink, false) ->$/;"	f	module:lager_app
boot_sink	src/lager_app.erl	/^boot_sink(Sink, {Sink, Def}) ->$/;"	f	module:lager_app
bounce	src/lager_common_test_backend.erl	/^bounce() ->$/;"	f	module:lager_common_test_backend
bounce	src/lager_common_test_backend.erl	/^bounce(Level) ->$/;"	f	module:lager_common_test_backend
brackets_to_parens	src/lager_stdlib.erl	/^brackets_to_parens(S) ->$/;"	f	module:lager_stdlib
build	src/lager_format.erl	/^build([$\\n], Acc, MaxLen, #options{chomp=true}) ->$/;"	f	module:lager_format
build	src/lager_format.erl	/^build([$\\n|Cs], Acc, MaxLen, O) ->$/;"	f	module:lager_format
build	src/lager_format.erl	/^build([$\\t|Cs], Acc, MaxLen, O) ->$/;"	f	module:lager_format
build	src/lager_format.erl	/^build([C|Cs], Acc, MaxLen, O) ->$/;"	f	module:lager_format
build	src/lager_format.erl	/^build([], Acc, MaxLen, _O) ->$/;"	f	module:lager_format
build	src/lager_format.erl	/^build([{$n, _, _, _, _, _, _}], Acc, MaxLen, #options{chomp=true}) ->$/;"	f	module:lager_format
build	src/lager_format.erl	/^build([{C,As,F,Ad,P,Pad,Enc}|Cs], Acc, MaxLen, O) ->$/;"	f	module:lager_format
build2	src/lager_format.erl	/^build2([C|Cs], Count, MaxLen) ->$/;"	f	module:lager_format
build2	src/lager_format.erl	/^build2([], _, _) -> [].$/;"	f	module:lager_format
build2	src/lager_format.erl	/^build2([{C,As,F,Ad,P,Pad,Enc}|Cs], Count, MaxLen) ->$/;"	f	module:lager_format
build_fmt_args	test/trunc_io_eqc.erl	/^build_fmt_args(FmtArgs) ->$/;"	f	module:trunc_io_eqc
calculate_fudge	test/trunc_io_eqc.erl	/^calculate_fudge([], Acc) ->$/;"	f	module:trunc_io_eqc
calculate_fudge	test/trunc_io_eqc.erl	/^calculate_fudge([_|T], Acc) ->$/;"	f	module:trunc_io_eqc
calculate_fudge	test/trunc_io_eqc.erl	/^calculate_fudge([{"~62P", _Arg, _Depth}|T], Acc) ->$/;"	f	module:trunc_io_eqc
calculate_fudge	test/trunc_io_eqc.erl	/^calculate_fudge([{Fmt, Arg}|T], Acc) when$/;"	f	module:trunc_io_eqc
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation(Spec) ->$/;"	f	module:lager_util
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation([], Now) ->$/;"	f	module:lager_util
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation([{date, Date}|T], {{Year, Month, Day}, _} = Now) ->$/;"	f	module:lager_util
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation([{date, Date}|T], {{_, _, Date}, _} = Now) ->$/;"	f	module:lager_util
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation([{date, last}|T], {{Year, Month, Day}, _} = Now) ->$/;"	f	module:lager_util
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation([{day, Day}|T], {Date, _Time} = Now) ->$/;"	f	module:lager_util
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation([{hour, X}|T], {{_, _, _}, _} = Now) ->$/;"	f	module:lager_util
calculate_next_rotation	src/lager_util.erl	/^calculate_next_rotation([{hour, X}|T], {{_, _, _}, {Hour, _, _}} = Now) when Hour < X ->$/;"	f	module:lager_util
cdata_to_chars	src/lager_format.erl	/^cdata_to_chars(B) when is_binary(B) ->$/;"	f	module:lager_format
cdata_to_chars	src/lager_format.erl	/^cdata_to_chars([C|Cs]) when is_integer(C), C >= $\\000 ->$/;"	f	module:lager_format
cdata_to_chars	src/lager_format.erl	/^cdata_to_chars([I|Cs]) ->$/;"	f	module:lager_format
cdata_to_chars	src/lager_format.erl	/^cdata_to_chars([]) ->$/;"	f	module:lager_format
char	src/lager_format.erl	/^char(C, F, Adj, P, Pad) when F >= P ->$/;"	f	module:lager_format
char	src/lager_format.erl	/^char(C, F, _Adj, none, _Pad) -> chars(C, F);$/;"	f	module:lager_format
char	src/lager_format.erl	/^char(C, none, _Adj, P, _Pad) -> chars(C, P);$/;"	f	module:lager_format
char	src/lager_format.erl	/^char(C, none, _Adj, none, _Pad) -> [C];$/;"	f	module:lager_format
chars	src/lager_format.erl	/^chars(C, 1) ->$/;"	f	module:lager_format
chars	src/lager_format.erl	/^chars(C, 2) ->$/;"	f	module:lager_format
chars	src/lager_format.erl	/^chars(C, 3) ->$/;"	f	module:lager_format
chars	src/lager_format.erl	/^chars(C, N) when is_integer(N) ->$/;"	f	module:lager_format
chars	src/lager_format.erl	/^chars(C, N) when is_integer(N), (N band 1) =:= 0 ->$/;"	f	module:lager_format
chars	src/lager_format.erl	/^chars(_C, 0) ->$/;"	f	module:lager_format
check	test/trunc_io_eqc.erl	/^check() ->$/;"	f	module:trunc_io_eqc
check_handler_config	src/lager_app.erl	/^check_handler_config(Handler, _BadConfig) ->$/;"	f	module:lager_app
check_handler_config	src/lager_app.erl	/^check_handler_config(_Handler, Config) when is_list(Config) orelse is_atom(Config) ->$/;"	f	module:lager_app
check_handler_config	src/lager_app.erl	/^check_handler_config({lager_file_backend, F}, Config) when is_list(Config) ->$/;"	f	module:lager_app
check_handler_config_test_	src/lager_app.erl	/^check_handler_config_test_() ->$/;"	f	module:lager_app
check_hwm	src/lager_util.erl	/^check_hwm(Shaper = #lager_shaper{hwm = undefined}) ->$/;"	f	module:lager_util
check_hwm	src/lager_util.erl	/^check_hwm(Shaper = #lager_shaper{lasttime = Last, dropped = Drop}) ->$/;"	f	module:lager_util
check_hwm	src/lager_util.erl	/^check_hwm(Shaper = #lager_shaper{mps = Mps, hwm = Hwm}) when Mps < Hwm ->$/;"	f	module:lager_util
check_trace	src/lager_util.erl	/^check_trace(Attrs, {Filter, _Level, Dest}) when is_list(Filter) ->$/;"	f	module:lager_util
check_trace	src/lager_util.erl	/^check_trace(Attrs, {Filter, _Level, Dest}) when is_tuple(Filter) ->$/;"	f	module:lager_util
check_trace_test	src/lager_util.erl	/^check_trace_test() ->$/;"	f	module:lager_util
check_traces	src/lager_util.erl	/^check_traces(Attrs, Level, [Flow|Flows], Acc) ->$/;"	f	module:lager_util
check_traces	src/lager_util.erl	/^check_traces(Attrs, Level, [{Filter, _, _}|Flows], Acc) when length(Attrs) < length(Filter) ->$/;"	f	module:lager_util
check_traces	src/lager_util.erl	/^check_traces(Attrs, Level, [{_, {mask, FilterLevel}, _}|Flows], Acc) when (Level band FilterLevel) == 0 ->$/;"	f	module:lager_util
check_traces	src/lager_util.erl	/^check_traces(_, _,  [], Acc) ->$/;"	f	module:lager_util
clean_up_config_checks	src/lager_app.erl	/^clean_up_config_checks() ->$/;"	f	module:lager_app
cleanup	test/lager_test_backend.erl	/^cleanup(_) ->$/;"	f	module:lager_test_backend
clear_all_traces	src/lager.erl	/^clear_all_traces() ->$/;"	f	module:lager
clear_traces_by_sink	src/lager.erl	/^clear_traces_by_sink(Sinks) ->$/;"	f	module:lager
close_file	src/lager_file_backend.erl	/^close_file(#state{fd=FD} = State) ->$/;"	f	module:lager_file_backend
close_file	src/lager_file_backend.erl	/^close_file(#state{fd=undefined} = State) ->$/;"	f	module:lager_file_backend
code_change	src/error_logger_lager_h.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:error_logger_lager_h
code_change	src/error_logger_lager_h.erl	/^code_change(_OldVsn, {state, Shaper, GLStrategy}, _Extra) ->$/;"	f	module:error_logger_lager_h
code_change	src/error_logger_lager_h.erl	/^code_change(_OldVsn, {state, Sink, Shaper, GLS}, _Extra) ->$/;"	f	module:error_logger_lager_h
code_change	src/lager_backend_throttle.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_backend_throttle
code_change	src/lager_common_test_backend.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_common_test_backend
code_change	src/lager_console_backend.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_console_backend
code_change	src/lager_crash_log.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_crash_log
code_change	src/lager_file_backend.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_file_backend
code_change	src/lager_handler_watcher.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_handler_watcher
code_change	src/lager_manager_killer.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_manager_killer
code_change	test/crash.erl	/^code_change(_, State, _) ->$/;"	f	module:crash
code_change	test/lager_crash_backend.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_crash_backend
code_change	test/lager_slow_backend.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_slow_backend
code_change	test/lager_test_backend.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:lager_test_backend
collect	src/lager_format.erl	/^collect([$~|Fmt0], Args0) ->$/;"	f	module:lager_format
collect	src/lager_format.erl	/^collect([C|Fmt], Args) ->$/;"	f	module:lager_format
collect	src/lager_format.erl	/^collect([], []) -> [].$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$#|Fmt], [A|Args]) -> {$#,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$+|Fmt], [A|Args]) -> {$+,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$B|Fmt], [A|Args]) -> {$B,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$P|Fmt], [A,Depth|Args]) -> {$P,[A,Depth],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$W|Fmt], [A,Depth|Args]) -> {$W,[A,Depth],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$X|Fmt], [A,Prefix|Args]) -> {$X,[A,Prefix],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$b|Fmt], [A|Args]) -> {$b,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$c|Fmt], [A|Args]) -> {$c,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$e|Fmt], [A|Args]) -> {$e,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$f|Fmt], [A|Args]) -> {$f,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$g|Fmt], [A|Args]) -> {$g,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$i|Fmt], [A|Args]) -> {$i,[A],Fmt,Args}.$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$n|Fmt], Args) when is_list(Args) -> {$n,[],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$p|Fmt], [A|Args]) -> {$p,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$s|Fmt], [A|Args]) -> {$s,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$w|Fmt], [A|Args]) -> {$w,[A],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$x|Fmt], [A,Prefix|Args]) -> {$x,[A,Prefix],Fmt,Args};$/;"	f	module:lager_format
collect_cc	src/lager_format.erl	/^collect_cc([$~|Fmt], Args) when is_list(Args) -> {$~,[],Fmt,Args};$/;"	f	module:lager_format
collect_cseq	src/lager_format.erl	/^collect_cseq(Fmt0, Args0) ->$/;"	f	module:lager_format
collect_workers	test/lager_test_backend.erl	/^collect_workers(Workers) ->$/;"	f	module:lager_test_backend
collect_workers	test/lager_test_backend.erl	/^collect_workers([]) ->$/;"	f	module:lager_test_backend
compress_pr_record_test	test/compress_pr_record_test.erl	/^-module(compress_pr_record_test).$/;"	m
concat_lists	src/lager_transform.erl	/^concat_lists({call, Line, _Function, _Args} = Call, B) ->$/;"	f	module:lager_transform
concat_lists	src/lager_transform.erl	/^concat_lists({cons, Line, Element, Tail}, B) ->$/;"	f	module:lager_transform
concat_lists	src/lager_transform.erl	/^concat_lists({lc, Line, _Body, _Generator} = LC, B) ->$/;"	f	module:lager_transform
concat_lists	src/lager_transform.erl	/^concat_lists({nil, _Line}, B) ->$/;"	f	module:lager_transform
concat_lists	src/lager_transform.erl	/^concat_lists({record_field, Line, _Var, _Record, _Field} = Rec, B) ->$/;"	f	module:lager_transform
concat_lists	src/lager_transform.erl	/^concat_lists({var, Line, _Name}=Var, B) ->$/;"	f	module:lager_transform
cond_lowercase	src/lager_format.erl	/^cond_lowercase(String, true) ->$/;"	f	module:lager_format
cond_lowercase	src/lager_format.erl	/^cond_lowercase(String,false) ->$/;"	f	module:lager_format
config_to_id	src/lager_file_backend.erl	/^config_to_id(Config) ->$/;"	f	module:lager_file_backend
config_to_id	src/lager_file_backend.erl	/^config_to_id([{Name,_Severity,_Size,_Rotation,_Count}, _Format]) ->$/;"	f	module:lager_file_backend
config_to_id	src/lager_file_backend.erl	/^config_to_id([{Name,_Severity}, _Format]) when is_list(Name) ->$/;"	f	module:lager_file_backend
config_to_id	src/lager_file_backend.erl	/^config_to_id({Name,_Severity,_Size,_Rotation,_Count}) ->$/;"	f	module:lager_file_backend
config_to_id	src/lager_file_backend.erl	/^config_to_id({Name,_Severity}) when is_list(Name) ->$/;"	f	module:lager_file_backend
config_to_levels	src/lager_util.erl	/^config_to_levels(Conf) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels(Conf) when is_atom(Conf) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$! | Rest]) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$< | Rest]) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$<, $= | Rest]) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$= | Rest]) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$=, $< | Rest]) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$=, $> | Rest]) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$> | Rest]) ->$/;"	f	module:lager_util
config_to_levels	src/lager_util.erl	/^config_to_levels([$>, $= | Rest]) ->$/;"	f	module:lager_util
config_to_levels_int	src/lager_util.erl	/^config_to_levels_int(Conf) ->$/;"	f	module:lager_util
config_to_levels_test	src/lager_util.erl	/^config_to_levels_test() ->$/;"	f	module:lager_util
config_to_mask	src/lager_util.erl	/^config_to_mask(Conf) ->$/;"	f	module:lager_util
config_to_mask_test	src/lager_util.erl	/^config_to_mask_test() ->$/;"	f	module:lager_util
config_validation_test_	src/lager_file_backend.erl	/^config_validation_test_() ->$/;"	f	module:lager_file_backend
configure_extra_sinks	src/lager_app.erl	/^configure_extra_sinks(Sinks) ->$/;"	f	module:lager_app
configure_sink	src/lager_app.erl	/^configure_sink(Sink, SinkDef) ->$/;"	f	module:lager_app
configured_sink	src/error_logger_lager_h.erl	/^configured_sink() ->$/;"	f	module:error_logger_lager_h
confirm_manager_exit	test/lager_manager_killer_test.erl	/^confirm_manager_exit(Manager, Delay) ->$/;"	f	module:lager_manager_killer_test
confirm_sink_reregister	test/lager_manager_killer_test.erl	/^confirm_sink_reregister(Sink, Delay) ->$/;"	f	module:lager_manager_killer_test
console_log_test_	src/lager_console_backend.erl	/^console_log_test_() ->$/;"	f	module:lager_console_backend
control	src/lager_format.erl	/^control($#, [A], F, Adj, P, Pad, _Enc, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($+, [A], F, Adj, P, Pad, _Enc, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($B, [A], F, Adj, P, Pad, _Enc, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($X, [A,Prefix], F, Adj, P, Pad, _Enc, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($X, [A,Prefix], F, Adj, P, Pad, _Enc, L) when is_integer(A), $/;"	f	module:lager_format
control	src/lager_format.erl	/^control($b, [A], F, Adj, P, Pad, _Enc, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($c, [A], F, Adj, P, Pad, _Enc, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($c, [A], F, Adj, P, Pad, unicode, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($e, [A], F, Adj, P, Pad, _Enc, L) when is_float(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($f, [A], F, Adj, P, Pad, _Enc, L) when is_float(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($g, [A], F, Adj, P, Pad, _Enc, L) when is_float(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($i, [_A], _F, _Adj, _P, _Pad, _Enc, L) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($n, [], F, Adj, P, Pad, _Enc, L) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($s, [A], F, Adj, P, Pad, _Enc, L) when is_atom(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($x, [A,Prefix], F, Adj, P, Pad, _Enc, L) when is_integer(A) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control($x, [A,Prefix], F, Adj, P, Pad, _Enc, L) when is_integer(A), $/;"	f	module:lager_format
control	src/lager_format.erl	/^control($~, [], F, Adj, P, Pad, _Enc, L) ->$/;"	f	module:lager_format
control	src/lager_format.erl	/^control(C, A, F, Adj, P, Pad, Enc, L) ->$/;"	f	module:lager_format
control2	src/lager_format.erl	/^control2($P, [A,Depth], _F, _Adj, _P, _Pad, _Enc, L) when is_integer(Depth) ->$/;"	f	module:lager_format
control2	src/lager_format.erl	/^control2($W, [A,Depth], F, Adj, P, Pad, _Enc, L) when is_integer(Depth) ->$/;"	f	module:lager_format
control2	src/lager_format.erl	/^control2($p, [A], _F, _Adj, _P, _Pad, _Enc, L) ->$/;"	f	module:lager_format
control2	src/lager_format.erl	/^control2($s, [L0], F, Adj, P, Pad, latin1, L) ->$/;"	f	module:lager_format
control2	src/lager_format.erl	/^control2($s, [L0], F, Adj, P, Pad, unicode, L) ->$/;"	f	module:lager_format
control2	src/lager_format.erl	/^control2($w, [A], F, Adj, P, Pad, _Enc, L) ->$/;"	f	module:lager_format
count	test/lager_test_backend.erl	/^count() ->$/;"	f	module:lager_test_backend
count	test/lager_test_backend.erl	/^count(Sink) ->$/;"	f	module:lager_test_backend
count_ignored	test/lager_test_backend.erl	/^count_ignored() ->$/;"	f	module:lager_test_backend
count_ignored	test/lager_test_backend.erl	/^count_ignored(Sink) ->$/;"	f	module:lager_test_backend
count_nl	src/lager_stdlib.erl	/^count_nl($\\n) ->$/;"	f	module:lager_stdlib
count_nl	src/lager_stdlib.erl	/^count_nl(Bin) when is_binary(Bin) ->$/;"	f	module:lager_stdlib
count_nl	src/lager_stdlib.erl	/^count_nl([E | Es]) ->$/;"	f	module:lager_stdlib
count_nl	src/lager_stdlib.erl	/^count_nl(_) ->$/;"	f	module:lager_stdlib
crash	test/crash.erl	/^-module(crash).$/;"	m
crash	test/lager_test_backend.erl	/^crash(Type) ->$/;"	f	module:lager_test_backend
date_time_now	src/lager_default_formatter.erl	/^date_time_now() ->$/;"	f	module:lager_default_formatter
datetime	src/lager_msg.erl	/^datetime(Msg) ->$/;"	f	module:lager_msg
dec_depth	src/lager_trunc_io.erl	/^dec_depth(#print_options{depth=Depth} = Options) when Depth > 0 ->$/;"	f	module:lager_trunc_io
dec_depth	src/lager_trunc_io.erl	/^dec_depth(Options) ->$/;"	f	module:lager_trunc_io
decide_crash_log	src/lager_sup.erl	/^decide_crash_log(File) ->$/;"	f	module:lager_sup
decide_crash_log	src/lager_sup.erl	/^decide_crash_log(false) ->$/;"	f	module:lager_sup
depth_limit_test	src/lager_trunc_io.erl	/^depth_limit_test() ->$/;"	f	module:lager_trunc_io
destinations	src/lager_msg.erl	/^destinations(Msg) ->$/;"	f	module:lager_msg
determine_async_behavior	src/lager_app.erl	/^determine_async_behavior(Sink, Threshold, Window) ->$/;"	f	module:lager_app
determine_async_behavior	src/lager_app.erl	/^determine_async_behavior(Sink, Threshold, undefined) ->$/;"	f	module:lager_app
determine_async_behavior	src/lager_app.erl	/^determine_async_behavior(_Sink, Threshold, Window) when not is_integer(Window) orelse Window > Threshold orelse Window < 0 ->$/;"	f	module:lager_app
determine_async_behavior	src/lager_app.erl	/^determine_async_behavior(_Sink, Threshold, _Window) when not is_integer(Threshold) orelse Threshold < 0 ->$/;"	f	module:lager_app
determine_async_behavior	src/lager_app.erl	/^determine_async_behavior(_Sink, undefined, _Window) ->$/;"	f	module:lager_app
determine_rotation_date	src/lager_sup.erl	/^determine_rotation_date(_) ->$/;"	f	module:lager_sup
determine_rotation_date	src/lager_sup.erl	/^determine_rotation_date({ok, ""}) ->$/;"	f	module:lager_sup
determine_rotation_date	src/lager_sup.erl	/^determine_rotation_date({ok, Val3}) ->$/;"	f	module:lager_sup
discard_messages	src/lager_util.erl	/^discard_messages(Second, Count) ->$/;"	f	module:lager_util
dispatch_log	src/lager.erl	/^dispatch_log(Severity, Metadata, Format, Args, Size) ->$/;"	f	module:lager
dispatch_log	src/lager.erl	/^dispatch_log(Severity, _Module, _Function, _Line, _Pid, Metadata, Format, Args, Size) ->$/;"	f	module:lager
dispatch_log	src/lager.erl	/^dispatch_log(Sink, Severity, Metadata, Format, Args, Size, Safety) when is_atom(Severity)->$/;"	f	module:lager
do_log	src/lager.erl	/^do_log(Severity, Metadata, Format, Args, Size, SeverityAsInt, LevelThreshold, TraceFilters, Sink, SinkPid) when is_atom(Severity) ->$/;"	f	module:lager
do_log	src/lager.erl	/^do_log(Severity, Metadata, Format, Args, Size, SeverityAsInt, LevelThreshold, TraceFilters, SinkPid) ->$/;"	f	module:lager
do_log	src/lager_crash_log.erl	/^do_log({log, Event}, #state{name=Name, fd=FD, inode=Inode, flap=Flap,$/;"	f	module:lager_crash_log
do_log_impl	src/lager.erl	/^do_log_impl(Severity, Metadata, Format, Args, SeverityAsInt, LevelThreshold, TraceFilters, Sink, SinkPid, FormatFun) ->$/;"	f	module:lager
do_log_unsafe	src/lager.erl	/^do_log_unsafe(Severity, Metadata, Format, Args, _Size, SeverityAsInt, LevelThreshold, TraceFilters, Sink, SinkPid) when is_atom(Severity) ->$/;"	f	module:lager
do_transform	src/lager_transform.erl	/^do_transform(Line, SinkName, Severity, Arguments0) ->$/;"	f	module:lager_transform
do_transform	src/lager_transform.erl	/^do_transform(Line, SinkName, Severity, Arguments0, Safety) ->$/;"	f	module:lager_transform
do_write	src/lager_file_backend.erl	/^do_write(#state{fd=FD, name=Name, flap=Flap} = State, Level, Msg) ->$/;"	f	module:lager_file_backend
encoding	src/lager_format.erl	/^encoding(Fmt,Args) ->$/;"	f	module:lager_format
encoding	src/lager_format.erl	/^encoding([$t|Fmt],Args) ->$/;"	f	module:lager_format
ensure_logfile	src/lager_util.erl	/^ensure_logfile(Name, FD, Inode, Buffer) ->$/;"	f	module:lager_util
ensure_started	test/lager_manager_killer_test.erl	/^ensure_started(App) ->$/;"	f	module:lager_manager_killer_test
eol	src/lager_console_backend.erl	/^eol() ->$/;"	f	module:lager_console_backend
eqc_test_	test/trunc_io_eqc.erl	/^eqc_test_() ->$/;"	f	module:trunc_io_eqc
error:badarg	test/pr_stacktrace_test.erl	/^error:badarg",$/;"	f	module:pr_stacktrace_test
error:undef	test/pr_stacktrace_test.erl	/^error:undef",$/;"	f	module:pr_stacktrace_test
error_logger_lager_h	src/error_logger_lager_h.erl	/^-module(error_logger_lager_h).$/;"	m
error_logger_redirect_cleanup	test/lager_test_backend.erl	/^error_logger_redirect_cleanup(_) ->$/;"	f	module:lager_test_backend
error_logger_redirect_crash_cleanup	test/lager_test_backend.erl	/^error_logger_redirect_crash_cleanup(_Sink) ->$/;"	f	module:lager_test_backend
error_logger_redirect_crash_setup	test/lager_test_backend.erl	/^error_logger_redirect_crash_setup() ->$/;"	f	module:lager_test_backend
error_logger_redirect_crash_setup_sink	test/lager_test_backend.erl	/^error_logger_redirect_crash_setup_sink() ->$/;"	f	module:lager_test_backend
error_logger_redirect_crash_test_	test/lager_test_backend.erl	/^error_logger_redirect_crash_test_() ->$/;"	f	module:lager_test_backend
error_logger_redirect_setup	test/lager_test_backend.erl	/^error_logger_redirect_setup() ->$/;"	f	module:lager_test_backend
error_logger_redirect_setup_sink	test/lager_test_backend.erl	/^error_logger_redirect_setup_sink() ->$/;"	f	module:lager_test_backend
error_logger_redirect_test_	test/lager_test_backend.erl	/^error_logger_redirect_test_() ->$/;"	f	module:lager_test_backend
error_msg	test/sync_error_logger.erl	/^error_msg(Format) ->$/;"	f	module:sync_error_logger
error_msg	test/sync_error_logger.erl	/^error_msg(Format, Args) ->$/;"	f	module:sync_error_logger
error_report	test/sync_error_logger.erl	/^error_report(Report) ->$/;"	f	module:sync_error_logger
error_report	test/sync_error_logger.erl	/^error_report(Type, Report) ->$/;"	f	module:sync_error_logger
escape	src/lager_trunc_io.erl	/^escape($\\b) -> "\\\\b";$/;"	f	module:lager_trunc_io
escape	src/lager_trunc_io.erl	/^escape($\\e) -> "\\\\e";$/;"	f	module:lager_trunc_io
escape	src/lager_trunc_io.erl	/^escape($\\f) -> "\\\\f";$/;"	f	module:lager_trunc_io
escape	src/lager_trunc_io.erl	/^escape($\\n) -> "\\\\n";$/;"	f	module:lager_trunc_io
escape	src/lager_trunc_io.erl	/^escape($\\r) -> "\\\\r";$/;"	f	module:lager_trunc_io
escape	src/lager_trunc_io.erl	/^escape($\\t) -> "\\\\t";$/;"	f	module:lager_trunc_io
escape	src/lager_trunc_io.erl	/^escape($\\v) -> "\\\\v".$/;"	f	module:lager_trunc_io
eval_gl	src/error_logger_lager_h.erl	/^eval_gl(Event, #state{groupleader_strategy=GlStrategy0}=State) when is_pid(element(2, Event)) ->$/;"	f	module:error_logger_lager_h
eval_gl	src/error_logger_lager_h.erl	/^eval_gl(Event, State) ->$/;"	f	module:error_logger_lager_h
exited	src/lager_stdlib.erl	/^exited(error) ->$/;"	f	module:lager_stdlib
exited	src/lager_stdlib.erl	/^exited(exit) ->$/;"	f	module:lager_stdlib
exited	src/lager_stdlib.erl	/^exited(throw) ->$/;"	f	module:lager_stdlib
exited_size	src/lager_stdlib.erl	/^exited_size(Class) ->$/;"	f	module:lager_stdlib
expand_handlers	src/lager_app.erl	/^expand_handlers([H|T]) ->$/;"	f	module:lager_app
expand_handlers	src/lager_app.erl	/^expand_handlers([]) ->$/;"	f	module:lager_app
expand_handlers	src/lager_app.erl	/^expand_handlers([{Mod, Config}|T]) when is_atom(Mod) ->$/;"	f	module:lager_app
expand_handlers	src/lager_app.erl	/^expand_handlers([{lager_file_backend, Configs}|T]) ->$/;"	f	module:lager_app
expand_handlers	src/lager_app.erl	/^expand_handlers([{lager_file_backend, [{Key, _Value}|_]=Config}|T]) when is_atom(Key) ->$/;"	f	module:lager_app
expand_path	src/lager_util.erl	/^expand_path(RelPath) ->$/;"	f	module:lager_util
expand_path_test	src/lager_util.erl	/^expand_path_test() ->$/;"	f	module:lager_util
explain_reason	src/lager_stdlib.erl	/^explain_reason(Reason, Class, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(badarg, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(badarith, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(function_clause, error, [{F,A}], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(function_clause, error=Cl, [{M,F,As}], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(if_clause, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(noproc, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(notalive, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(restricted_shell_started, exit, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(restricted_shell_stopped, exit, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(system_limit, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(timeout_value, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason(undef, error, [{M,F,A}], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({argument_limit,_Fun}, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({bad_filter,V}, error=Cl, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({bad_generator,V}, error=Cl, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({badarg,V}, error=Cl, [], PF, Str) -> % orelse, andalso$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({badarity,{Fun,As}}, error, [], _PF, _Str) $/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({badfun,Term}, error=Cl, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({badmatch,Term}, error=Cl, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({case_clause,V}, error=Cl, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({restricted_shell_bad_return, V}, exit=Cl, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({restricted_shell_disallowed,{ForMF,As}}, $/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({shell_undef,F,A}, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({try_clause,V}, error=Cl, [], PF, Str) ->$/;"	f	module:lager_stdlib
explain_reason	src/lager_stdlib.erl	/^explain_reason({unbound,V}, error, [], _PF, _Str) ->$/;"	f	module:lager_stdlib
extra_sinks_test_	test/lager_test_backend.erl	/^extra_sinks_test_() ->$/;"	f	module:lager_test_backend
field_value	src/lager_format.erl	/^field_value(Fmt, Args) ->$/;"	f	module:lager_format
field_value	src/lager_format.erl	/^field_value(Fmt, Args, F) -> %Default case$/;"	f	module:lager_format
field_value	src/lager_format.erl	/^field_value([$*|Fmt], [A|Args]) when is_integer(A) ->$/;"	f	module:lager_format
field_value	src/lager_format.erl	/^field_value([C|Fmt], Args) when is_integer(C), C >= $0, C =< $9 ->$/;"	f	module:lager_format
field_value	src/lager_format.erl	/^field_value([C|Fmt], Args, F) when is_integer(C), C >= $0, C =< $9 ->$/;"	f	module:lager_format
field_width	src/lager_format.erl	/^field_width(F, Fmt, Args) when F < 0 ->$/;"	f	module:lager_format
field_width	src/lager_format.erl	/^field_width(F, Fmt, Args) when F >= 0 ->$/;"	f	module:lager_format
field_width	src/lager_format.erl	/^field_width(Fmt0, Args0) ->$/;"	f	module:lager_format
field_width	src/lager_format.erl	/^field_width([$-|Fmt0], Args0) ->$/;"	f	module:lager_format
filesystem_test_	src/lager_crash_log.erl	/^filesystem_test_() ->$/;"	f	module:lager_crash_log
filesystem_test_	src/lager_file_backend.erl	/^filesystem_test_() ->$/;"	f	module:lager_file_backend
filtermap	src/lager.erl	/^filtermap(Fun, List1) ->$/;"	f	module:lager
find_app_file	src/lager_transform.erl	/^find_app_file(Dir) ->$/;"	f	module:lager_transform
find_traces	src/lager.erl	/^find_traces(Sinks) ->$/;"	f	module:lager
flat_trunc	src/lager_format.erl	/^flat_trunc(L, 0, R) when is_list(L) ->$/;"	f	module:lager_format
flat_trunc	src/lager_format.erl	/^flat_trunc(List, N) when is_integer(N), N >= 0 ->$/;"	f	module:lager_format
flat_trunc	src/lager_format.erl	/^flat_trunc([H|T], N, R) ->$/;"	f	module:lager_format
flat_trunc	src/lager_format.erl	/^flat_trunc([], _, R) ->$/;"	f	module:lager_format
float_data	src/lager_format.erl	/^float_data(Fl) ->$/;"	f	module:lager_format
float_data	src/lager_format.erl	/^float_data([$e|E], Ds) ->$/;"	f	module:lager_format
float_data	src/lager_format.erl	/^float_data([D|Cs], Ds) when D >= $0, D =< $9 ->$/;"	f	module:lager_format
float_data	src/lager_format.erl	/^float_data([_|Cs], Ds) ->$/;"	f	module:lager_format
float_e	src/lager_format.erl	/^float_e(Fl, Fd, P) when Fl < 0.0 -> %Negative numbers$/;"	f	module:lager_format
float_e	src/lager_format.erl	/^float_e(_Fl, {Ds,E}, P) ->$/;"	f	module:lager_format
float_exp	src/lager_format.erl	/^float_exp(E) ->$/;"	f	module:lager_format
float_exp	src/lager_format.erl	/^float_exp(E) when E >= 0 ->$/;"	f	module:lager_format
float_f	src/lager_format.erl	/^float_f(Fl, Fd, P) when Fl < 0.0 ->$/;"	f	module:lager_format
float_f	src/lager_format.erl	/^float_f(Fl, {Ds,E}, P) when E =< 0 ->$/;"	f	module:lager_format
float_f	src/lager_format.erl	/^float_f(_Fl, {Ds,E}, P) ->$/;"	f	module:lager_format
float_inside_list_test	src/lager_trunc_io.erl	/^float_inside_list_test() ->$/;"	f	module:lager_trunc_io
float_man	src/lager_format.erl	/^float_man(Ds, 0, Dc) ->$/;"	f	module:lager_format
float_man	src/lager_format.erl	/^float_man([D|Ds], Dc) ->$/;"	f	module:lager_format
float_man	src/lager_format.erl	/^float_man([D|Ds], I, Dc) ->$/;"	f	module:lager_format
float_man	src/lager_format.erl	/^float_man([D|_], 0) when D >= $5 -> {[],true};$/;"	f	module:lager_format
float_man	src/lager_format.erl	/^float_man([], Dc) -> {string:chars($0, Dc),false}. %Pad with 0's$/;"	f	module:lager_format
float_man	src/lager_format.erl	/^float_man([], I, Dc) -> %Pad with 0's$/;"	f	module:lager_format
float_man	src/lager_format.erl	/^float_man([_|_], 0) -> {[],false};$/;"	f	module:lager_format
flush	test/lager_test_backend.erl	/^flush() ->$/;"	f	module:lager_test_backend
flush	test/lager_test_backend.erl	/^flush(Sink) ->$/;"	f	module:lager_test_backend
foo	test/special_process.erl	/^foo(baz) ->$/;"	f	module:special_process
format	src/lager_default_formatter.erl	/^format(Message,Config,Colors) ->$/;"	f	module:lager_default_formatter
format	src/lager_default_formatter.erl	/^format(Msg, Config) ->$/;"	f	module:lager_default_formatter
format	src/lager_default_formatter.erl	/^format(Msg,[], Colors) ->$/;"	f	module:lager_default_formatter
format	src/lager_default_formatter.erl	/^format(Msg,[{eol, EOL}], Colors) ->$/;"	f	module:lager_default_formatter
format	src/lager_format.erl	/^format(FmtStr, Args, MaxLen) ->$/;"	f	module:lager_format
format	src/lager_format.erl	/^format(FmtStr, Args, MaxLen, Opts) when is_atom(FmtStr) ->$/;"	f	module:lager_format
format	src/lager_format.erl	/^format(FmtStr, Args, MaxLen, Opts) when is_binary(FmtStr) ->$/;"	f	module:lager_format
format	src/lager_format.erl	/^format(FmtStr, Args, MaxLen, Opts) when is_list(FmtStr) ->$/;"	f	module:lager_format
format	src/lager_format.erl	/^format([], [], _, _) ->$/;"	f	module:lager_format
format	src/lager_format.erl	/^format(_FmtStr, _Args, _MaxLen, _Opts) ->$/;"	f	module:lager_format
format	src/lager_trunc_io.erl	/^format(Fmt, Args, Max) ->$/;"	f	module:lager_trunc_io
format	src/lager_trunc_io.erl	/^format(Fmt, Args, Max, Options) ->$/;"	f	module:lager_trunc_io
format_args	src/error_logger_lager_h.erl	/^format_args([H|T], FmtAcc, ArgsAcc) ->$/;"	f	module:error_logger_lager_h
format_args	src/error_logger_lager_h.erl	/^format_args([], FmtAcc, ArgsAcc) ->$/;"	f	module:error_logger_lager_h
format_call	src/lager_stdlib.erl	/^format_call(ErrStr, Pre1, ForMForFun, As, PF) ->$/;"	f	module:lager_stdlib
format_crash_report	src/error_logger_lager_h.erl	/^format_crash_report(Report, Neighbours) ->$/;"	f	module:error_logger_lager_h
format_errstr_call	src/lager_stdlib.erl	/^format_errstr_call(ErrStr, Class, ForMForFun, As, PF, Pre0) ->$/;"	f	module:lager_stdlib
format_exception	src/lager_stdlib.erl	/^format_exception(Class, Reason, StackTrace, FmtMaxBytes) ->$/;"	f	module:lager_stdlib
format_fun	src/lager_stdlib.erl	/^format_fun(Fun) when is_function(Fun) ->$/;"	f	module:lager_stdlib
format_mfa	src/error_logger_lager_h.erl	/^format_mfa(Other) ->$/;"	f	module:error_logger_lager_h
format_mfa	src/error_logger_lager_h.erl	/^format_mfa([{M, F, A, Props}, _]) when is_list(Props) ->$/;"	f	module:error_logger_lager_h
format_mfa	src/error_logger_lager_h.erl	/^format_mfa([{M, F, A}, _]) ->$/;"	f	module:error_logger_lager_h
format_mfa	src/error_logger_lager_h.erl	/^format_mfa({M, F, A, Props}) when is_list(Props) ->$/;"	f	module:error_logger_lager_h
format_mfa	src/error_logger_lager_h.erl	/^format_mfa({M, F, A}) when is_integer(A) ->$/;"	f	module:error_logger_lager_h
format_mfa	src/error_logger_lager_h.erl	/^format_mfa({M, F, A}) when is_list(A) ->$/;"	f	module:error_logger_lager_h
format_mfa	src/lager_stdlib.erl	/^format_mfa({M,F,Args}=StartF, FmtMaxBytes) ->$/;"	f	module:lager_stdlib
format_offender	src/error_logger_lager_h.erl	/^format_offender(Off) ->$/;"	f	module:error_logger_lager_h
format_op	src/lager_stdlib.erl	/^format_op(ErrStr, Pre, Op, [A1, A2], PF) ->$/;"	f	module:lager_stdlib
format_reason	src/error_logger_lager_h.erl	/^format_reason(Reason) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({'function not exported', [{M, F, A, _Props},MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({'function not exported', [{M, F, A},MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({Reason, [{M, F, A, Props}|_]}) when is_atom(M), is_atom(F), is_integer(A), is_list(Props) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({Reason, [{M, F, A}|_]}) when is_atom(M), is_atom(F), is_integer(A) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({bad_return, {MFA, Val}}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({bad_return, {_MFA, {'EXIT', Reason}}}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({bad_return_value, Val}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({badarg, [MFA,MFA2|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({badarith, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({emfile, _Trace}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({function_clause, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({if_clause, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({noproc, MFA}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({system_limit, [{M, F, _}|_] = Trace}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({undef, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{bad_return_value, Val}, MFA}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{badarg, Stack}, _}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{badarity, {Fun, Args}}, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{badfun, Term}, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{badmatch, Val}, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{badrecord, Record}, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{case_clause, Val}, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_reason	src/error_logger_lager_h.erl	/^format_reason({{try_clause, Val}, [MFA|_]}) ->$/;"	f	module:error_logger_lager_h
format_rep	src/lager_stdlib.erl	/^format_rep([{Tag,Data}|Rep], FmtMaxBytes) ->$/;"	f	module:lager_stdlib
format_rep	src/lager_stdlib.erl	/^format_rep([{error_info,{Class,Reason,StackTrace}}|Rep], FmtMaxBytes) ->$/;"	f	module:lager_stdlib
format_rep	src/lager_stdlib.erl	/^format_rep([{initial_call,InitialCall}|Rep], FmtMaxBytes) ->$/;"	f	module:lager_stdlib
format_rep	src/lager_stdlib.erl	/^format_rep(_, _S) ->$/;"	f	module:lager_stdlib
format_report	src/lager_stdlib.erl	/^format_report(Rep, FmtMaxBytes) ->$/;"	f	module:lager_stdlib
format_report	src/lager_stdlib.erl	/^format_report(Rep, FmtMaxBytes) when is_list(Rep) ->$/;"	f	module:lager_stdlib
format_stacktrace1	src/lager_stdlib.erl	/^format_stacktrace1(S0, Stack0, PF, SF) ->$/;"	f	module:lager_stdlib
format_stacktrace2	src/lager_stdlib.erl	/^format_stacktrace2(S, [{M,F,As}|Fs], N, PF) when is_list(As) ->$/;"	f	module:lager_stdlib
format_stacktrace2	src/lager_stdlib.erl	/^format_stacktrace2(S, [{M,F,A}|Fs], N, PF) when is_integer(A) ->$/;"	f	module:lager_stdlib
format_stacktrace2	src/lager_stdlib.erl	/^format_stacktrace2(_S, [], _N, _PF) ->$/;"	f	module:lager_stdlib
format_tag	src/lager_stdlib.erl	/^format_tag(Tag, Data, FmtMaxBytes) ->$/;"	f	module:lager_stdlib
format_test	src/lager_trunc_io.erl	/^format_test() ->$/;"	f	module:lager_trunc_io
format_time	src/lager_util.erl	/^format_time() ->$/;"	f	module:lager_util
format_time	src/lager_util.erl	/^format_time({utc, {{Y, M, D}, {H, Mi, S, Ms}}}) ->$/;"	f	module:lager_util
format_time	src/lager_util.erl	/^format_time({utc, {{Y, M, D}, {H, Mi, S}}}) ->$/;"	f	module:lager_util
format_time	src/lager_util.erl	/^format_time({{Y, M, D}, {H, Mi, S, Ms}}) ->$/;"	f	module:lager_util
format_time	src/lager_util.erl	/^format_time({{Y, M, D}, {H, Mi, S}}) ->$/;"	f	module:lager_util
format_time_test_	src/lager_util.erl	/^format_time_test_() ->$/;"	f	module:lager_util
format_value	src/lager_stdlib.erl	/^format_value(V, ErrStr, Class, PF, Str) ->$/;"	f	module:lager_stdlib
formatting_test_	src/lager_file_backend.erl	/^formatting_test_() ->$/;"	f	module:lager_file_backend
fprint	src/lager_trunc_io.erl	/^fprint(T, Max, Options) ->$/;"	f	module:lager_trunc_io
fprint	src/lager_trunc_io.erl	/^fprint(Term, Max) ->$/;"	f	module:lager_trunc_io
from_now	src/lager_handler_watcher.erl	/^from_now(Seconds) ->$/;"	f	module:lager_handler_watcher
function	test/crash.erl	/^function(X) when is_list(X) ->$/;"	f	module:crash
fwrite_e	src/lager_format.erl	/^fwrite_e(Fl, F, Adj, P, Pad) when P >= 2 ->$/;"	f	module:lager_format
fwrite_e	src/lager_format.erl	/^fwrite_e(Fl, F, Adj, none, Pad) ->$/;"	f	module:lager_format
fwrite_e	src/lager_format.erl	/^fwrite_e(Fl, none, Adj, none, Pad) -> %Default values$/;"	f	module:lager_format
fwrite_e	src/lager_format.erl	/^fwrite_e(Fl, none, _Adj, P, _Pad) when P >= 2 ->$/;"	f	module:lager_format
fwrite_f	src/lager_format.erl	/^fwrite_f(Fl, F, Adj, P, Pad) when P >= 1 ->$/;"	f	module:lager_format
fwrite_f	src/lager_format.erl	/^fwrite_f(Fl, F, Adj, none, Pad) ->$/;"	f	module:lager_format
fwrite_f	src/lager_format.erl	/^fwrite_f(Fl, none, Adj, none, Pad) -> %Default values$/;"	f	module:lager_format
fwrite_f	src/lager_format.erl	/^fwrite_f(Fl, none, _Adj, P, _Pad) when P >= 1 ->$/;"	f	module:lager_format
fwrite_g	src/lager_format.erl	/^fwrite_g(Fl, F, Adj, P, Pad) when P >= 1 ->$/;"	f	module:lager_format
fwrite_g	src/lager_format.erl	/^fwrite_g(Fl, F, Adj, none, Pad) ->$/;"	f	module:lager_format
gen_any	test/trunc_io_eqc.erl	/^gen_any(MaxDepth) ->$/;"	f	module:trunc_io_eqc
gen_atom	test/trunc_io_eqc.erl	/^gen_atom() ->$/;"	f	module:trunc_io_eqc
gen_bitstring	test/trunc_io_eqc.erl	/^gen_bitstring() ->$/;"	f	module:trunc_io_eqc
gen_char	test/trunc_io_eqc.erl	/^gen_char() ->$/;"	f	module:trunc_io_eqc
gen_fmt_args	test/trunc_io_eqc.erl	/^gen_fmt_args() ->$/;"	f	module:trunc_io_eqc
gen_fun	test/trunc_io_eqc.erl	/^gen_fun() ->$/;"	f	module:trunc_io_eqc
gen_iolist	test/trunc_io_eqc.erl	/^gen_iolist(0) ->$/;"	f	module:trunc_io_eqc
gen_iolist	test/trunc_io_eqc.erl	/^gen_iolist(Depth) ->$/;"	f	module:trunc_io_eqc
gen_max_len	test/trunc_io_eqc.erl	/^gen_max_len() -> %% Generate length from 3 to whatever.  Needs space for ... in output$/;"	f	module:trunc_io_eqc
gen_pid	test/trunc_io_eqc.erl	/^gen_pid() ->$/;"	f	module:trunc_io_eqc
gen_port	test/trunc_io_eqc.erl	/^gen_port() ->$/;"	f	module:trunc_io_eqc
gen_print_bin	test/trunc_io_eqc.erl	/^gen_print_bin() ->$/;"	f	module:trunc_io_eqc
gen_print_str	test/trunc_io_eqc.erl	/^gen_print_str() ->$/;"	f	module:trunc_io_eqc
gen_quoted_atom	test/trunc_io_eqc.erl	/^gen_quoted_atom() ->$/;"	f	module:trunc_io_eqc
gen_ref	test/trunc_io_eqc.erl	/^gen_ref() ->$/;"	f	module:trunc_io_eqc
gen_tuple	test/trunc_io_eqc.erl	/^gen_tuple(Gen) ->$/;"	f	module:trunc_io_eqc
get	src/lager_config.erl	/^get(Key) ->$/;"	f	module:lager_config
get	src/lager_config.erl	/^get(Key, Default) ->$/;"	f	module:lager_config
get	src/lager_config.erl	/^get({Sink, Key}, Default) ->$/;"	f	module:lager_config
get	src/lager_config.erl	/^get({_Sink, _Key}=FullKey) ->$/;"	f	module:lager_config
get_default	src/lager_backend_throttle.erl	/^get_default([]) ->$/;"	f	module:lager_backend_throttle
get_default	src/lager_backend_throttle.erl	/^get_default([{_Key, Value}]) ->$/;"	f	module:lager_backend_throttle
get_env	src/lager_app.erl	/^get_env(Application, Key) ->$/;"	f	module:lager_app
get_env	src/lager_app.erl	/^get_env(Application, Key, Default) ->$/;"	f	module:lager_app
get_env_default	src/lager_app.erl	/^get_env_default(undefined, Default) ->$/;"	f	module:lager_app
get_env_default	src/lager_app.erl	/^get_env_default({ok, Value}, _Default) ->$/;"	f	module:lager_app
get_loglevel	src/lager.erl	/^get_loglevel(Handler) ->$/;"	f	module:lager
get_loglevel	src/lager.erl	/^get_loglevel(Sink, Handler) ->$/;"	f	module:lager
get_loglevel_test	src/lager_file_backend.erl	/^get_loglevel_test() ->$/;"	f	module:lager_file_backend
get_loglevels	src/lager.erl	/^get_loglevels(Sink) ->$/;"	f	module:lager
get_logs	src/lager_common_test_backend.erl	/^get_logs() ->$/;"	f	module:lager_common_test_backend
get_metadata	src/lager_default_formatter.erl	/^get_metadata(Key, Metadata) ->$/;"	f	module:lager_default_formatter
get_metadata	src/lager_default_formatter.erl	/^get_metadata(Key, Metadata, Default) ->$/;"	f	module:lager_default_formatter
get_value	src/error_logger_lager_h.erl	/^get_value(Key, List, Default) ->$/;"	f	module:error_logger_lager_h
get_value	src/error_logger_lager_h.erl	/^get_value(Key, Value) ->$/;"	f	module:error_logger_lager_h
gh280_crash_test	test/zzzz_gh280_crash.erl	/^gh280_crash_test() ->$/;"	f	module:zzzz_gh280_crash
gh280_impl	test/zzzz_gh280_crash.erl	/^gh280_impl() ->$/;"	f	module:zzzz_gh280_crash
global_get	src/lager_config.erl	/^global_get(Key) ->$/;"	f	module:lager_config
global_get	src/lager_config.erl	/^global_get(Key, Default) ->$/;"	f	module:lager_config
global_set	src/lager_config.erl	/^global_set(Key, Value) ->$/;"	f	module:lager_config
guess_application	src/lager_transform.erl	/^guess_application(Dirname, Attr) when Dirname \/= undefined ->$/;"	f	module:lager_transform
guess_application	src/lager_transform.erl	/^guess_application(_, _) ->$/;"	f	module:lager_transform
guess_application	src/lager_transform.erl	/^guess_application(undefined, {attribute, _, file, {Filename, _}}) ->$/;"	f	module:lager_transform
handle_call	src/error_logger_lager_h.erl	/^handle_call(_Request, State) ->$/;"	f	module:error_logger_lager_h
handle_call	src/error_logger_lager_h.erl	/^handle_call({set_high_water, N}, #state{shaper=Shaper} = State) ->$/;"	f	module:error_logger_lager_h
handle_call	src/lager_backend_throttle.erl	/^handle_call(_Request, State) ->$/;"	f	module:lager_backend_throttle
handle_call	src/lager_backend_throttle.erl	/^handle_call(get_loglevel, State) ->$/;"	f	module:lager_backend_throttle
handle_call	src/lager_backend_throttle.erl	/^handle_call({set_loglevel, _Level}, State) ->$/;"	f	module:lager_backend_throttle
handle_call	src/lager_common_test_backend.erl	/^handle_call(_, State) ->$/;"	f	module:lager_common_test_backend
handle_call	src/lager_common_test_backend.erl	/^handle_call(get_loglevel, #state{level=Level} = State) ->$/;"	f	module:lager_common_test_backend
handle_call	src/lager_common_test_backend.erl	/^handle_call(get_logs, #state{log = Logs} = State) ->$/;"	f	module:lager_common_test_backend
handle_call	src/lager_common_test_backend.erl	/^handle_call({set_loglevel, Level}, State) ->$/;"	f	module:lager_common_test_backend
handle_call	src/lager_console_backend.erl	/^handle_call(_Request, State) ->$/;"	f	module:lager_console_backend
handle_call	src/lager_console_backend.erl	/^handle_call(get_loglevel, #state{level=Level} = State) ->$/;"	f	module:lager_console_backend
handle_call	src/lager_console_backend.erl	/^handle_call({set_loglevel, Level}, State) ->$/;"	f	module:lager_console_backend
handle_call	src/lager_crash_log.erl	/^handle_call(_Call, _From, State) ->$/;"	f	module:lager_crash_log
handle_call	src/lager_crash_log.erl	/^handle_call({log, _} = Log, _From, State) ->$/;"	f	module:lager_crash_log
handle_call	src/lager_file_backend.erl	/^handle_call(_Request, State) ->$/;"	f	module:lager_file_backend
handle_call	src/lager_file_backend.erl	/^handle_call(get_loglevel, #state{level=Level} = State) ->$/;"	f	module:lager_file_backend
handle_call	src/lager_file_backend.erl	/^handle_call(rotate, State = #state{name=File}) ->$/;"	f	module:lager_file_backend
handle_call	src/lager_file_backend.erl	/^handle_call({set_loghwm, Hwm}, #state{shaper=Shaper, name=Name} = State) ->$/;"	f	module:lager_file_backend
handle_call	src/lager_file_backend.erl	/^handle_call({set_loglevel, Level}, #state{name=Ident} = State) ->$/;"	f	module:lager_file_backend
handle_call	src/lager_handler_watcher.erl	/^handle_call(_Call, _From, State) ->$/;"	f	module:lager_handler_watcher
handle_call	src/lager_manager_killer.erl	/^handle_call(_Request, State) ->$/;"	f	module:lager_manager_killer
handle_call	src/lager_manager_killer.erl	/^handle_call(get_loglevel, State) ->$/;"	f	module:lager_manager_killer
handle_call	src/lager_manager_killer.erl	/^handle_call(get_settings, State = #state{killer_hwm=KillerHWM, killer_reinstall_after=KillerReinstallAfter}) ->$/;"	f	module:lager_manager_killer
handle_call	src/lager_manager_killer.erl	/^handle_call(kill_self, #state{killer_hwm=KillerHWM, killer_reinstall_after=KillerReinstallAfter}) ->$/;"	f	module:lager_manager_killer
handle_call	src/lager_manager_killer.erl	/^handle_call({set_loglevel, _Level}, State) ->$/;"	f	module:lager_manager_killer
handle_call	test/crash.erl	/^handle_call(_Call, _From, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(bad_return, _, _) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(bad_return_string, _, _) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(badarg1, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(badarg2, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(badarith, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(badarity, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(badfun, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(badmatch, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(badrecord, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(case_clause, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(case_clause_string, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(function_clause, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(if_clause, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(noproc, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(port_limit, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(process_limit, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(system_limit, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(throw, _, _State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(try_clause, _, State) ->$/;"	f	module:crash
handle_call	test/crash.erl	/^handle_call(undef, _, State) ->$/;"	f	module:crash
handle_call	test/lager_crash_backend.erl	/^handle_call(_Request, State) ->$/;"	f	module:lager_crash_backend
handle_call	test/lager_slow_backend.erl	/^handle_call(_Request, State) ->$/;"	f	module:lager_slow_backend
handle_call	test/lager_slow_backend.erl	/^handle_call(get_loglevel, State) ->$/;"	f	module:lager_slow_backend
handle_call	test/lager_test_backend.erl	/^handle_call(_Request, State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call(count, #state{buffer=Buffer} = State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call(count_ignored, #state{ignored=Ignored} = State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call(flush, State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call(get_loglevel, #state{level=Level} = State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call(pop, #state{buffer=Buffer} = State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call(print_bad_state, State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call(print_state, State) ->$/;"	f	module:lager_test_backend
handle_call	test/lager_test_backend.erl	/^handle_call({set_loglevel, Level}, State) ->$/;"	f	module:lager_test_backend
handle_cast	src/lager_crash_log.erl	/^handle_cast(_Request, State) ->$/;"	f	module:lager_crash_log
handle_cast	src/lager_crash_log.erl	/^handle_cast({log, _} = Log, State) ->$/;"	f	module:lager_crash_log
handle_cast	src/lager_handler_watcher.erl	/^handle_cast(_Request, State) ->$/;"	f	module:lager_handler_watcher
handle_cast	test/crash.erl	/^handle_cast(_Cast, State) ->$/;"	f	module:crash
handle_event	src/error_logger_lager_h.erl	/^handle_event(Event, #state{sink=Sink, shaper=Shaper} = State) ->$/;"	f	module:error_logger_lager_h
handle_event	src/lager_backend_throttle.erl	/^handle_event(_Event, State) ->$/;"	f	module:lager_backend_throttle
handle_event	src/lager_backend_throttle.erl	/^handle_event({log, _Message},State) ->$/;"	f	module:lager_backend_throttle
handle_event	src/lager_common_test_backend.erl	/^handle_event(Event, State) ->$/;"	f	module:lager_common_test_backend
handle_event	src/lager_common_test_backend.erl	/^handle_event({log, Message},$/;"	f	module:lager_common_test_backend
handle_event	src/lager_console_backend.erl	/^handle_event(_Event, State) ->$/;"	f	module:lager_console_backend
handle_event	src/lager_console_backend.erl	/^handle_event({log, Message},$/;"	f	module:lager_console_backend
handle_event	src/lager_file_backend.erl	/^handle_event(_Event, State) ->$/;"	f	module:lager_file_backend
handle_event	src/lager_file_backend.erl	/^handle_event({log, Message},$/;"	f	module:lager_file_backend
handle_event	src/lager_manager_killer.erl	/^handle_event(_Event, State) ->$/;"	f	module:lager_manager_killer
handle_event	src/lager_manager_killer.erl	/^handle_event({log, _Message}, State = #state{killer_hwm=KillerHWM, killer_reinstall_after=KillerReinstallAfter}) ->$/;"	f	module:lager_manager_killer
handle_event	test/lager_crash_backend.erl	/^handle_event(_Event, State) ->$/;"	f	module:lager_crash_backend
handle_event	test/lager_slow_backend.erl	/^handle_event(_Event, State) ->$/;"	f	module:lager_slow_backend
handle_event	test/lager_slow_backend.erl	/^handle_event({log, _Message}, State) ->$/;"	f	module:lager_slow_backend
handle_event	test/lager_test_backend.erl	/^handle_event(_Event, State) ->$/;"	f	module:lager_test_backend
handle_event	test/lager_test_backend.erl	/^handle_event({log, Msg},$/;"	f	module:lager_test_backend
handle_info	src/error_logger_lager_h.erl	/^handle_info(_Info, State) ->$/;"	f	module:error_logger_lager_h
handle_info	src/lager_backend_throttle.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_backend_throttle
handle_info	src/lager_common_test_backend.erl	/^handle_info(_, State) ->$/;"	f	module:lager_common_test_backend
handle_info	src/lager_console_backend.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_console_backend
handle_info	src/lager_crash_log.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_crash_log
handle_info	src/lager_crash_log.erl	/^handle_info(rotate, #state{name=Name, count=Count, date=Date} = State) ->$/;"	f	module:lager_crash_log
handle_info	src/lager_file_backend.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_file_backend
handle_info	src/lager_file_backend.erl	/^handle_info({rotate, File}, #state{name=File,count=Count,date=Date} = State) ->$/;"	f	module:lager_file_backend
handle_info	src/lager_handler_watcher.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_handler_watcher
handle_info	src/lager_handler_watcher.erl	/^handle_info(reinstall_handler, #state{module=Module, config=Config, sink=Sink} = State) ->$/;"	f	module:lager_handler_watcher
handle_info	src/lager_handler_watcher.erl	/^handle_info(stop, State) ->$/;"	f	module:lager_handler_watcher
handle_info	src/lager_handler_watcher.erl	/^handle_info({gen_event_EXIT, Module, Reason}, #state{module=Module,$/;"	f	module:lager_handler_watcher
handle_info	src/lager_handler_watcher.erl	/^handle_info({gen_event_EXIT, Module, normal}, #state{module=Module} = State) ->$/;"	f	module:lager_handler_watcher
handle_info	src/lager_handler_watcher.erl	/^handle_info({gen_event_EXIT, Module, shutdown}, #state{module=Module} = State) ->$/;"	f	module:lager_handler_watcher
handle_info	src/lager_handler_watcher.erl	/^handle_info({gen_event_EXIT, Module, {'EXIT', {kill_me, [_KillerHWM, KillerReinstallAfter]}}},$/;"	f	module:lager_handler_watcher
handle_info	src/lager_handler_watcher.erl	/^handle_info({reboot, Sink}, State) ->$/;"	f	module:lager_handler_watcher
handle_info	src/lager_manager_killer.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_manager_killer
handle_info	test/crash.erl	/^handle_info(_Info, State) ->$/;"	f	module:crash
handle_info	test/lager_crash_backend.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_crash_backend
handle_info	test/lager_crash_backend.erl	/^handle_info(crash, _State) ->$/;"	f	module:lager_crash_backend
handle_info	test/lager_slow_backend.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_slow_backend
handle_info	test/lager_test_backend.erl	/^handle_info(_Info, State) ->$/;"	f	module:lager_test_backend
has_line_numbers	test/lager_test_backend.erl	/^has_line_numbers() ->$/;"	f	module:lager_test_backend
have_log	test/lager_rotate.erl	/^have_log(Data, Log) ->$/;"	f	module:lager_rotate
have_no_log	test/lager_rotate.erl	/^have_no_log(Data, Log) ->$/;"	f	module:lager_rotate
high_watermark_test_	test/lager_test_backend.erl	/^high_watermark_test_() ->$/;"	f	module:lager_test_backend
i2l	src/lager_util.erl	/^i2l(I)              -> integer_to_list(I).$/;"	f	module:lager_util
i2l	src/lager_util.erl	/^i2l(I) when I < 10  -> [$0, $0+I];$/;"	f	module:lager_util
i3l	src/lager_util.erl	/^i3l(I)              -> integer_to_list(I).$/;"	f	module:lager_util
i3l	src/lager_util.erl	/^i3l(I) when I < 100 -> [$0 | i2l(I)];$/;"	f	module:lager_util
improper_io_list_test	src/lager_trunc_io.erl	/^improper_io_list_test() ->$/;"	f	module:lager_trunc_io
info_msg	test/sync_error_logger.erl	/^info_msg(Format) ->$/;"	f	module:sync_error_logger
info_msg	test/sync_error_logger.erl	/^info_msg(Format, Args) ->$/;"	f	module:sync_error_logger
info_report	test/sync_error_logger.erl	/^info_report(Report) ->$/;"	f	module:sync_error_logger
info_report	test/sync_error_logger.erl	/^info_report(Type, Report) ->$/;"	f	module:sync_error_logger
init	src/error_logger_lager_h.erl	/^init([HighWaterMark, GlStrategy]) ->$/;"	f	module:error_logger_lager_h
init	src/lager_backend_throttle.erl	/^init([{sink, Sink}, Hwm, Window]) ->$/;"	f	module:lager_backend_throttle
init	src/lager_common_test_backend.erl	/^init(Level) ->$/;"	f	module:lager_common_test_backend
init	src/lager_common_test_backend.erl	/^init([Level, true]) -> % for backwards compatibility$/;"	f	module:lager_common_test_backend
init	src/lager_common_test_backend.erl	/^init([Level,false]) -> % for backwards compatibility$/;"	f	module:lager_common_test_backend
init	src/lager_common_test_backend.erl	/^init([Level,{Formatter,FormatterConfig}]) when is_atom(Formatter) ->$/;"	f	module:lager_common_test_backend
init	src/lager_console_backend.erl	/^init(Level) ->$/;"	f	module:lager_console_backend
init	src/lager_console_backend.erl	/^init([Level, true]) -> % for backwards compatibility$/;"	f	module:lager_console_backend
init	src/lager_console_backend.erl	/^init([Level,false]) -> % for backwards compatibility$/;"	f	module:lager_console_backend
init	src/lager_console_backend.erl	/^init([Level,{Formatter,FormatterConfig}]) when is_atom(Formatter) ->$/;"	f	module:lager_console_backend
init	src/lager_console_backend.erl	/^init([Level]) when is_atom(Level) ->$/;"	f	module:lager_console_backend
init	src/lager_crash_log.erl	/^init([RelFilename, MaxBytes, Size, Date, Count]) ->$/;"	f	module:lager_crash_log
init	src/lager_file_backend.erl	/^init(LogFileConfig) when is_list(LogFileConfig) ->$/;"	f	module:lager_file_backend
init	src/lager_file_backend.erl	/^init([LogFile,{Formatter}]) ->$/;"	f	module:lager_file_backend
init	src/lager_file_backend.erl	/^init([{FileName, LogLevel, Size, Date, Count}, {Formatter,FormatterConfig}]) when is_list(FileName), is_atom(LogLevel), is_atom(Formatter) ->$/;"	f	module:lager_file_backend
init	src/lager_file_backend.erl	/^init([{FileName, LogLevel}, {Formatter,FormatterConfig}]) when is_list(FileName), is_atom(LogLevel), is_atom(Formatter) ->$/;"	f	module:lager_file_backend
init	src/lager_file_backend.erl	/^init({FileName, LogLevel, Size, Date, Count}) when is_list(FileName), is_atom(LogLevel) ->$/;"	f	module:lager_file_backend
init	src/lager_file_backend.erl	/^init({FileName, LogLevel}) when is_list(FileName), is_atom(LogLevel) ->$/;"	f	module:lager_file_backend
init	src/lager_handler_watcher.erl	/^init([Sink, Module, Config]) ->$/;"	f	module:lager_handler_watcher
init	src/lager_handler_watcher_sup.erl	/^init([]) ->$/;"	f	module:lager_handler_watcher_sup
init	src/lager_manager_killer.erl	/^init([KillerHWM, KillerReinstallAfter]) ->$/;"	f	module:lager_manager_killer
init	src/lager_sup.erl	/^init([]) ->$/;"	f	module:lager_sup
init	test/crash.erl	/^init(_) ->$/;"	f	module:crash
init	test/lager_crash_backend.erl	/^init([CrashBefore, CrashAfter]) ->$/;"	f	module:lager_crash_backend
init	test/lager_slow_backend.erl	/^init([{delay, Delay}]) ->$/;"	f	module:lager_slow_backend
init	test/lager_test_backend.erl	/^init(Level) ->$/;"	f	module:lager_test_backend
init	test/special_process.erl	/^init(Parent) ->$/;"	f	module:special_process
insert_record_attribute	src/lager_transform.erl	/^insert_record_attribute(AST) ->$/;"	f	module:lager_transform
install_handler	src/lager_handler_watcher.erl	/^install_handler(Sink, Module, Config) ->$/;"	f	module:lager_handler_watcher
install_handler	src/lager_handler_watcher.erl	/^install_handler(Sink, lager_backend_throttle, Config) ->$/;"	f	module:lager_handler_watcher
install_handler2	src/lager_handler_watcher.erl	/^install_handler2(Sink, Module, Config) ->$/;"	f	module:lager_handler_watcher
interpret_hwm	src/lager_app.erl	/^interpret_hwm(HWM) ->$/;"	f	module:lager_app
interpret_hwm	src/lager_app.erl	/^interpret_hwm(HWM) when not is_integer(HWM) orelse HWM < 0 ->$/;"	f	module:lager_app
interpret_hwm	src/lager_app.erl	/^interpret_hwm(undefined) ->$/;"	f	module:lager_app
iolist_printing_test	src/lager_trunc_io.erl	/^iolist_printing_test() ->$/;"	f	module:lager_trunc_io
iolist_to_chars	src/lager_format.erl	/^iolist_to_chars(B) when is_binary(B) ->$/;"	f	module:lager_format
iolist_to_chars	src/lager_format.erl	/^iolist_to_chars([C|Cs]) when is_integer(C), C >= $\\000, C =< $\\377 ->$/;"	f	module:lager_format
iolist_to_chars	src/lager_format.erl	/^iolist_to_chars([I|Cs]) ->$/;"	f	module:lager_format
iolist_to_chars	src/lager_format.erl	/^iolist_to_chars([]) ->$/;"	f	module:lager_format
is_loggable	src/lager_util.erl	/^is_loggable(Msg ,SeverityThreshold,MyName) ->$/;"	f	module:lager_util
is_loggable	src/lager_util.erl	/^is_loggable(Msg, {mask, Mask}, MyName) ->$/;"	f	module:lager_util
is_loggable_test_	src/lager_util.erl	/^is_loggable_test_() ->$/;"	f	module:lager_util
is_my_error_report	src/lager_stdlib.erl	/^is_my_error_report(_)                   -> false.$/;"	f	module:lager_stdlib
is_my_error_report	src/lager_stdlib.erl	/^is_my_error_report(crash_report)        -> true;$/;"	f	module:lager_stdlib
is_my_error_report	src/lager_stdlib.erl	/^is_my_error_report(supervisor_report)   -> true;$/;"	f	module:lager_stdlib
is_my_info_report	src/lager_stdlib.erl	/^is_my_info_report(_)         -> false.$/;"	f	module:lager_stdlib
is_my_info_report	src/lager_stdlib.erl	/^is_my_info_report(progress)  -> true;$/;"	f	module:lager_stdlib
is_new_style_console_available	src/lager_console_backend.erl	/^is_new_style_console_available() ->$/;"	f	module:lager_console_backend
is_op	src/lager_stdlib.erl	/^is_op(ForMForFun, A) ->$/;"	f	module:lager_stdlib
is_record_known	src/lager.erl	/^is_record_known(Record, Module) ->$/;"	f	module:lager
is_stacktrace	src/lager_stdlib.erl	/^is_stacktrace([]) ->$/;"	f	module:lager_stdlib
is_stacktrace	src/lager_stdlib.erl	/^is_stacktrace([{M,F,As}|Fs]) when is_atom(M), is_atom(F), length(As) >= 0 ->$/;"	f	module:lager_stdlib
is_stacktrace	src/lager_stdlib.erl	/^is_stacktrace([{M,F,A}|Fs]) when is_atom(M), is_atom(F), is_integer(A) ->$/;"	f	module:lager_stdlib
is_stacktrace	src/lager_stdlib.erl	/^is_stacktrace(_) ->$/;"	f	module:lager_stdlib
kill_me	src/lager_manager_killer.erl	/^kill_me() ->$/;"	f	module:lager_manager_killer
lager	src/lager.erl	/^-module(lager).$/;"	m
lager_app	src/lager_app.erl	/^-module(lager_app).$/;"	m
lager_backend_throttle	src/lager_backend_throttle.erl	/^-module(lager_backend_throttle).$/;"	m
lager_common_test_backend	src/lager_common_test_backend.erl	/^-module(lager_common_test_backend).$/;"	m
lager_config	src/lager_config.erl	/^-module(lager_config).$/;"	m
lager_console_backend	src/lager_console_backend.erl	/^-module(lager_console_backend).$/;"	m
lager_crash_backend	test/lager_crash_backend.erl	/^-module(lager_crash_backend).$/;"	m
lager_crash_log	src/lager_crash_log.erl	/^-module(lager_crash_log).$/;"	m
lager_default_formatter	src/lager_default_formatter.erl	/^-module(lager_default_formatter).$/;"	m
lager_file_backend	src/lager_file_backend.erl	/^-module(lager_file_backend).$/;"	m
lager_format	src/lager_format.erl	/^-module(lager_format).$/;"	m
lager_handler_watcher	src/lager_handler_watcher.erl	/^-module(lager_handler_watcher).$/;"	m
lager_handler_watcher_sup	src/lager_handler_watcher_sup.erl	/^-module(lager_handler_watcher_sup).$/;"	m
lager_manager_killer	src/lager_manager_killer.erl	/^-module(lager_manager_killer).$/;"	m
lager_manager_killer_test	test/lager_manager_killer_test.erl	/^-module(lager_manager_killer_test).$/;"	m
lager_msg	src/lager_msg.erl	/^-module(lager_msg).$/;"	m
lager_msg	src/lager_msg.erl	/^-record(lager_msg,{$/;"	r
lager_rotate	test/lager_rotate.erl	/^-module(lager_rotate).$/;"	m
lager_shaper	include/lager.hrl	/^-record(lager_shaper, {$/;"	r
lager_slow_backend	test/lager_slow_backend.erl	/^-module(lager_slow_backend).$/;"	m
lager_stdlib	src/lager_stdlib.erl	/^-module(lager_stdlib).$/;"	m
lager_sup	src/lager_sup.erl	/^-module(lager_sup).$/;"	m
lager_test_	test/lager_test_backend.erl	/^lager_test_() ->$/;"	f	module:lager_test_backend
lager_test_backend	test/lager_test_backend.erl	/^-module(lager_test_backend).$/;"	m
lager_transform	src/lager_transform.erl	/^-module(lager_transform).$/;"	m
lager_trunc_io	src/lager_trunc_io.erl	/^-module(lager_trunc_io).$/;"	m
lager_util	src/lager_util.erl	/^-module(lager_util).$/;"	m
level_to_atom	src/lager_util.erl	/^level_to_atom(String) ->$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(alert)      -> $A;$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(critical)   -> $C;$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(debug)      -> $D;$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(emergency)  -> $M;$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(error)      -> $E;$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(info)       -> $I;$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(none)       -> $ .$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(notice)     -> $N;$/;"	f	module:lager_util
level_to_chr	src/lager_util.erl	/^level_to_chr(warning)    -> $W;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(alert)      -> ?ALERT;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(critical)   -> ?CRITICAL;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(debug)      -> ?DEBUG;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(emergency)  -> ?EMERGENCY;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(error)      -> ?ERROR;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(info)       -> ?INFO;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(none)       -> ?LOG_NONE.$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(notice)     -> ?NOTICE;$/;"	f	module:lager_util
level_to_num	src/lager_util.erl	/^level_to_num(warning)    -> ?WARNING;$/;"	f	module:lager_util
levels	src/lager_util.erl	/^levels() ->$/;"	f	module:lager_util
lib_format_exception	src/lager_stdlib.erl	/^lib_format_exception(I, Class, Reason, StackTrace, StackFun, FormatFun) $/;"	f	module:lager_stdlib
limited_fmt	src/lager_crash_log.erl	/^limited_fmt(Fmt, Args, FmtMaxBytes) ->$/;"	f	module:lager_crash_log
limited_str	src/lager_crash_log.erl	/^limited_str(Term, FmtMaxBytes) ->$/;"	f	module:lager_crash_log
list_all_sinks	src/lager.erl	/^list_all_sinks() ->$/;"	f	module:lager
list_body	src/lager_trunc_io.erl	/^list_body(X, Max, Options, _Tuple) ->  %% improper list$/;"	f	module:lager_trunc_io
list_body	src/lager_trunc_io.erl	/^list_body([H], Max, Options=#print_options{depth=1}, _Tuple) ->$/;"	f	module:lager_trunc_io
list_body	src/lager_trunc_io.erl	/^list_body([H|T], Max, Options, Tuple) ->$/;"	f	module:lager_trunc_io
list_body	src/lager_trunc_io.erl	/^list_body([H|_], Max, Options=#print_options{depth=1}, Tuple) ->$/;"	f	module:lager_trunc_io
list_body	src/lager_trunc_io.erl	/^list_body([], _Max, _Options, _Tuple) -> {[], 0};$/;"	f	module:lager_trunc_io
list_body	src/lager_trunc_io.erl	/^list_body(_, Max, _Options, _Tuple) when Max < 4 -> {"...", 3};$/;"	f	module:lager_trunc_io
list_body	src/lager_trunc_io.erl	/^list_body(_, _Max, #print_options{depth=0}, _Tuple) -> {"...", 3};$/;"	f	module:lager_trunc_io
list_bodyc	src/lager_trunc_io.erl	/^list_bodyc(X, Max, Options, _Tuple) ->  %% improper list$/;"	f	module:lager_trunc_io
list_bodyc	src/lager_trunc_io.erl	/^list_bodyc([H|T], Max, #print_options{depth=Depth} = Options, Tuple) ->$/;"	f	module:lager_trunc_io
list_bodyc	src/lager_trunc_io.erl	/^list_bodyc([], _Max, _Options, _Tuple) -> {[], 0};$/;"	f	module:lager_trunc_io
list_bodyc	src/lager_trunc_io.erl	/^list_bodyc(_, Max, _Options, _Tuple) when Max < 5 -> {",...", 4};$/;"	f	module:lager_trunc_io
list_bodyc	src/lager_trunc_io.erl	/^list_bodyc(_, _Max, #print_options{depth=1}, false) -> {"|...", 4};$/;"	f	module:lager_trunc_io
list_bodyc	src/lager_trunc_io.erl	/^list_bodyc(_, _Max, #print_options{depth=1}, true) -> {",...", 4};$/;"	f	module:lager_trunc_io
list_printing_test	src/lager_trunc_io.erl	/^list_printing_test() ->$/;"	f	module:lager_trunc_io
localtime_ms	src/lager_util.erl	/^localtime_ms() ->$/;"	f	module:lager_util
localtime_ms	src/lager_util.erl	/^localtime_ms(Now) ->$/;"	f	module:lager_util
log	src/lager.erl	/^log(Level, Metadata, Format, Args) when is_list(Metadata) ->$/;"	f	module:lager
log	src/lager.erl	/^log(Level, Metadata, Message) when is_list(Metadata) ->$/;"	f	module:lager
log	src/lager.erl	/^log(Level, Pid, Format, Args) when is_pid(Pid); is_atom(Pid) ->$/;"	f	module:lager
log	src/lager.erl	/^log(Level, Pid, Message) when is_pid(Pid); is_atom(Pid) ->$/;"	f	module:lager
log	src/lager.erl	/^log(Sink, Level, Metadata, Format, Args) when is_list(Metadata) ->$/;"	f	module:lager
log	src/lager.erl	/^log(Sink, Level, Pid, Format, Args) when is_pid(Pid); is_atom(Pid) ->$/;"	f	module:lager
log_event	src/error_logger_lager_h.erl	/^log_event(Event, #state{sink=Sink} = State) ->$/;"	f	module:error_logger_lager_h
log_unsafe	src/lager.erl	/^log_unsafe(Level, Metadata, Format, Args) when is_list(Metadata) ->$/;"	f	module:lager
loop	test/special_process.erl	/^loop() ->$/;"	f	module:special_process
lowercase	src/lager_format.erl	/^lowercase([H|T]) ->$/;"	f	module:lager_format
lowercase	src/lager_format.erl	/^lowercase([H|T]) when is_integer(H), H >= $A, H =< $Z ->$/;"	f	module:lager_format
lowercase	src/lager_format.erl	/^lowercase([]) ->$/;"	f	module:lager_format
make_internal_sink_name	src/lager_util.erl	/^make_internal_sink_name(Sink) ->$/;"	f	module:lager_util
make_internal_sink_name	src/lager_util.erl	/^make_internal_sink_name(lager) ->$/;"	f	module:lager_util
make_options	src/lager_format.erl	/^make_options([], Options) ->$/;"	f	module:lager_format
make_options	src/lager_format.erl	/^make_options([{chomp, Bool}|T], Options) when is_boolean(Bool) ->$/;"	f	module:lager_format
make_printable	src/lager_default_formatter.erl	/^make_printable(A) when is_atom(A) -> atom_to_list(A);$/;"	f	module:lager_default_formatter
make_printable	src/lager_default_formatter.erl	/^make_printable(A,W) when is_integer(W)-> string:left(make_printable(A),W);$/;"	f	module:lager_default_formatter
make_printable	src/lager_default_formatter.erl	/^make_printable(A,_W) -> make_printable(A).$/;"	f	module:lager_default_formatter
make_printable	src/lager_default_formatter.erl	/^make_printable(A,{Align,W}) when is_integer(W) ->$/;"	f	module:lager_default_formatter
make_printable	src/lager_default_formatter.erl	/^make_printable(L) when is_list(L) orelse is_binary(L) -> L; $/;"	f	module:lager_default_formatter
make_printable	src/lager_default_formatter.erl	/^make_printable(Other) -> io_lib:format("~p",[Other]).$/;"	f	module:lager_default_formatter
make_printable	src/lager_default_formatter.erl	/^make_printable(P) when is_pid(P) -> pid_to_list(P);$/;"	f	module:lager_default_formatter
make_throw	test/pr_stacktrace_test.erl	/^make_throw() ->$/;"	f	module:pr_stacktrace_test
make_varname	src/lager_transform.erl	/^make_varname(Prefix, Line) ->$/;"	f	module:lager_transform
map_body	src/lager_trunc_io.erl	/^map_body(Map, Max, #print_options{depth=Depth}) when Max < 4; Depth =:= 0 ->$/;"	f	module:lager_trunc_io
map_body	src/lager_trunc_io.erl	/^map_body(Map, Max, Options) ->$/;"	f	module:lager_trunc_io
map_bodyc	src/lager_trunc_io.erl	/^map_bodyc([], _Max, _Options) ->$/;"	f	module:lager_trunc_io
map_bodyc	src/lager_trunc_io.erl	/^map_bodyc([{Key, Value} | Rest], Max, Options) ->$/;"	f	module:lager_trunc_io
map_bodyc	src/lager_trunc_io.erl	/^map_bodyc(_Rest, Max,#print_options{depth=Depth}) when Max < 5; Depth =:= 0 ->$/;"	f	module:lager_trunc_io
map_printing_test	src/lager_trunc_io.erl	/^map_printing_test() ->$/;"	f	module:lager_trunc_io
mask_to_levels	src/lager_util.erl	/^mask_to_levels(Mask) ->$/;"	f	module:lager_util
mask_to_levels	src/lager_util.erl	/^mask_to_levels(Mask, [Level|Levels], Acc) ->$/;"	f	module:lager_util
mask_to_levels	src/lager_util.erl	/^mask_to_levels(_Mask, [], Acc) ->$/;"	f	module:lager_util
mask_to_levels_test	src/lager_util.erl	/^mask_to_levels_test() ->$/;"	f	module:lager_util
maybe_install_sink_killer	src/lager_app.erl	/^maybe_install_sink_killer(Sink, HWM, ReinstallTimer) when is_integer(HWM) andalso is_integer(ReinstallTimer) $/;"	f	module:lager_app
maybe_install_sink_killer	src/lager_app.erl	/^maybe_install_sink_killer(Sink, HWM, undefined) -> maybe_install_sink_killer(Sink, HWM, 5000);$/;"	f	module:lager_app
maybe_install_sink_killer	src/lager_app.erl	/^maybe_install_sink_killer(_Sink, HWM, ReinstallTimer) ->$/;"	f	module:lager_app
maybe_install_sink_killer	src/lager_app.erl	/^maybe_install_sink_killer(_Sink, undefined, _ReinstallTimer) -> ok;$/;"	f	module:lager_app
maybe_make_handler_id	src/lager_app.erl	/^maybe_make_handler_id(Mod, Config) ->$/;"	f	module:lager_app
maybe_utc	src/lager_stdlib.erl	/^maybe_utc(Time) ->$/;"	f	module:lager_stdlib
maybe_utc	src/lager_util.erl	/^maybe_utc({Date, {H, M, S, Ms}}) ->$/;"	f	module:lager_util
md	src/lager.erl	/^md() ->$/;"	f	module:lager
md	src/lager.erl	/^md(NewMD) when is_list(NewMD) ->$/;"	f	module:lager
md	src/lager.erl	/^md(_) ->$/;"	f	module:lager
message	src/lager_msg.erl	/^message(Msg) ->$/;"	f	module:lager_msg
metadata	src/lager_msg.erl	/^metadata(Msg) ->$/;"	f	module:lager_msg
mf_to_string	src/lager_stdlib.erl	/^mf_to_string(F, _A) ->$/;"	f	module:lager_stdlib
mf_to_string	src/lager_stdlib.erl	/^mf_to_string(Fun, _A) when is_function(Fun) ->$/;"	f	module:lager_stdlib
mf_to_string	src/lager_stdlib.erl	/^mf_to_string({M, F}, A) ->$/;"	f	module:lager_stdlib
mfa_to_string	src/lager_stdlib.erl	/^mfa_to_string(M, F, A) ->$/;"	f	module:lager_stdlib
minimum_loglevel	src/lager.erl	/^minimum_loglevel(Levels) ->$/;"	f	module:lager
month	src/lager_stdlib.erl	/^month(1) -> "Jan";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(10) -> "Oct";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(11) -> "Nov";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(12) -> "Dec".$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(2) -> "Feb";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(3) -> "Mar";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(4) -> "Apr";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(5) -> "May";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(6) -> "Jun";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(7) -> "Jul";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(8) -> "Aug";$/;"	f	module:lager_stdlib
month	src/lager_stdlib.erl	/^month(9) -> "Sep";$/;"	f	module:lager_stdlib
n_args	src/lager_stdlib.erl	/^n_args(A) when is_integer(A) ->$/;"	f	module:lager_stdlib
n_args	src/lager_stdlib.erl	/^n_args(As) when is_list(As) ->$/;"	f	module:lager_stdlib
n_spaces	src/lager_stdlib.erl	/^n_spaces(N) ->$/;"	f	module:lager_stdlib
nested_record_test	test/compress_pr_record_test.erl	/^nested_record_test() ->$/;"	f	module:compress_pr_record_test
nested_record_test	test/pr_nested_record_test.erl	/^nested_record_test() ->$/;"	f	module:pr_nested_record_test
new	src/lager_config.erl	/^new() ->$/;"	f	module:lager_config
new	src/lager_msg.erl	/^new(Msg, Severity, Metadata, Destinations) ->$/;"	f	module:lager_msg
new	src/lager_msg.erl	/^new(Msg, Timestamp, Severity, Metadata, Destinations) ->$/;"	f	module:lager_msg
new_sink	src/lager_config.erl	/^new_sink(Sink) ->$/;"	f	module:lager_config
newline	src/lager_format.erl	/^newline(F, right, _P, _Pad) -> chars($\\n, F).$/;"	f	module:lager_format
newline	src/lager_format.erl	/^newline(none, _Adj, _P, _Pad) -> "\\n";$/;"	f	module:lager_format
not_running_test	test/lager_test_backend.erl	/^not_running_test() ->$/;"	f	module:lager_test_backend
num_to_level	src/lager_util.erl	/^num_to_level(?ALERT)     -> alert;$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?CRITICAL)  -> critical;$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?DEBUG)     -> debug;$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?EMERGENCY) -> emergency;$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?ERROR)     -> error;$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?INFO)      -> info;$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?LOG_NONE)  -> none.$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?NOTICE)    -> notice;$/;"	f	module:lager_util
num_to_level	src/lager_util.erl	/^num_to_level(?WARNING)   -> warning;$/;"	f	module:lager_util
open_logfile	src/lager_util.erl	/^open_logfile(Name, Buffer) ->$/;"	f	module:lager_util
options	src/lager_format.erl	/^-record(options, {$/;"	r
origin	src/lager_stdlib.erl	/^origin(1, M, F, A) ->$/;"	f	module:lager_stdlib
origin	src/lager_stdlib.erl	/^origin(_N, _M, _F, _A) ->$/;"	f	module:lager_stdlib
other_node_suffix	src/lager_crash_log.erl	/^other_node_suffix(Pid) when node(Pid) =\/= node() ->$/;"	f	module:lager_crash_log
other_node_suffix	src/lager_crash_log.erl	/^other_node_suffix(_) ->$/;"	f	module:lager_crash_log
otp_version	test/lager_test_backend.erl	/^otp_version() ->$/;"	f	module:lager_test_backend
otp_version	test/lager_test_backend.erl	/^otp_version(Rel) ->$/;"	f	module:lager_test_backend
otp_version	test/lager_test_backend.erl	/^otp_version([$R | Rel]) ->$/;"	f	module:lager_test_backend
output	src/lager_default_formatter.erl	/^output(Other,_) -> make_printable(Other).$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(Other,_, Width) -> make_printable(Other, Width).$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(Prop, Msg, Width) when is_atom(Prop) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(Prop,Msg) when is_atom(Prop) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(blank,_Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(blank,_Msg, _Width) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(date,Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(date,Msg, _Width) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(message, Msg, _Width) -> lager_msg:message(Msg);$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(message,Msg) -> lager_msg:message(Msg);$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(metadata, Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(metadata, Msg, _Width) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(sev,Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(sev,Msg, _Width) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(severity, Msg, Width) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(severity,Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(time, Msg, _Width) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output(time,Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({Prop, Present, Absent, Width}, Msg) when is_atom(Prop) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({Prop, Present, Absent}, Msg) when is_atom(Prop) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({Prop,Default},Msg) when is_atom(Prop) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({Prop,Default},Msg, Width) when is_atom(Prop) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({blank, Fill},_Msg, _Width) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({blank,Fill},_Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({metadata, IntSep, FieldSep}, Msg) ->$/;"	f	module:lager_default_formatter
output	src/lager_default_formatter.erl	/^output({metadata, IntSep, FieldSep}, Msg, _Width) ->$/;"	f	module:lager_default_formatter
output_color	src/lager_default_formatter.erl	/^output_color(Msg,Colors) ->$/;"	f	module:lager_default_formatter
output_color	src/lager_default_formatter.erl	/^output_color(_Msg,[]) -> [];$/;"	f	module:lager_default_formatter
overload_alternate_sink_test_	test/lager_manager_killer_test.erl	/^overload_alternate_sink_test_() ->$/;"	f	module:lager_manager_killer_test
overload_test_	test/lager_manager_killer_test.erl	/^overload_test_() ->$/;"	f	module:lager_manager_killer_test
pad_char	src/lager_format.erl	/^pad_char(Fmt, Args) -> {$\\s,Fmt,Args}.$/;"	f	module:lager_format
pad_char	src/lager_format.erl	/^pad_char([$.,$*|Fmt], [Pad|Args]) -> {Pad,Fmt,Args};$/;"	f	module:lager_format
pad_char	src/lager_format.erl	/^pad_char([$.,Pad|Fmt], Args) -> {Pad,Fmt,Args};$/;"	f	module:lager_format
parse_fail_test	src/lager_util.erl	/^parse_fail_test() ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec([$$, $M, L|T]) when L == $L; L == $l ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec([$$, $M, M1, M2]) ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec([$$, $M, M1, M2|[$D|_]=T]) ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec([$$, $M, M]) ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec([$$, $M, M|[$D|_]=T]) ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec([$$, $W, W|T]) when W >= $0, W =< $6 ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec([$$|X]) when X \/= [] ->$/;"	f	module:lager_util
parse_rotation_date_spec	src/lager_util.erl	/^parse_rotation_date_spec(_) ->$/;"	f	module:lager_util
parse_rotation_day_spec	src/lager_util.erl	/^parse_rotation_day_spec([$D, D1, D2], Res) ->$/;"	f	module:lager_util
parse_rotation_day_spec	src/lager_util.erl	/^parse_rotation_day_spec([$D, D], Res)  when D >= $0, D =< $9 ->$/;"	f	module:lager_util
parse_rotation_day_spec	src/lager_util.erl	/^parse_rotation_day_spec([], Res) ->$/;"	f	module:lager_util
parse_rotation_day_spec	src/lager_util.erl	/^parse_rotation_day_spec(_, _) ->$/;"	f	module:lager_util
parse_test	src/lager_util.erl	/^parse_test() ->$/;"	f	module:lager_util
parse_transform	src/lager_transform.erl	/^parse_transform(AST, Options) ->$/;"	f	module:lager_transform
perf	src/lager_trunc_io.erl	/^perf() ->$/;"	f	module:lager_trunc_io
perf	src/lager_trunc_io.erl	/^perf(M, F, Reps) when Reps > 0 ->$/;"	f	module:lager_trunc_io
perf	src/lager_trunc_io.erl	/^perf(_,_,_) ->$/;"	f	module:lager_trunc_io
perf1	src/lager_trunc_io.erl	/^perf1() ->$/;"	f	module:lager_trunc_io
perhaps_a_sasl_report	src/lager_crash_log.erl	/^perhaps_a_sasl_report(_, _, _) ->$/;"	f	module:lager_crash_log
perhaps_a_sasl_report	src/lager_crash_log.erl	/^perhaps_a_sasl_report(error_report, {Pid, Type, Report}, FmtMaxBytes) ->$/;"	f	module:lager_crash_log
pop	test/lager_test_backend.erl	/^pop() ->$/;"	f	module:lager_test_backend
pop	test/lager_test_backend.erl	/^pop(Sink) ->$/;"	f	module:lager_test_backend
posix_error	src/lager.erl	/^posix_error(Error) ->$/;"	f	module:lager
posix_error	src/lager.erl	/^posix_error(Error) when is_atom(Error) ->$/;"	f	module:lager
pp_arguments	src/lager_stdlib.erl	/^pp_arguments(PF, As, I) ->$/;"	f	module:lager_stdlib
pp_fun	src/lager_stdlib.erl	/^pp_fun(FmtMaxBytes) ->$/;"	f	module:lager_stdlib
pr	src/lager.erl	/^pr(Record, Module) when is_tuple(Record), is_atom(element(1, Record)) ->$/;"	f	module:lager
pr	src/lager.erl	/^pr(Record, Module, Options) when is_tuple(Record), is_atom(element(1, Record)), is_list(Options) ->$/;"	f	module:lager
pr	src/lager.erl	/^pr(Record, _) ->$/;"	f	module:lager
pr	src/lager.erl	/^pr(Record, _, _) ->$/;"	f	module:lager
pr_nested_record_test	test/pr_nested_record_test.erl	/^-module(pr_nested_record_test).$/;"	m
pr_stacktrace	src/lager.erl	/^pr_stacktrace(Stacktrace) ->$/;"	f	module:lager
pr_stacktrace	src/lager.erl	/^pr_stacktrace(Stacktrace, {Class, Reason}) ->$/;"	f	module:lager
pr_stacktrace_bad_arg_test	test/pr_stacktrace_test.erl	/^pr_stacktrace_bad_arg_test() ->$/;"	f	module:pr_stacktrace_test
pr_stacktrace_bad_arity_test	test/pr_stacktrace_test.erl	/^pr_stacktrace_bad_arity_test() ->$/;"	f	module:pr_stacktrace_test
pr_stacktrace_test	test/pr_stacktrace_test.erl	/^-module(pr_stacktrace_test).$/;"	m
pr_stacktrace_throw_test	test/pr_stacktrace_test.erl	/^pr_stacktrace_throw_test() ->$/;"	f	module:pr_stacktrace_test
precision	src/lager_format.erl	/^precision(Fmt, Args) ->$/;"	f	module:lager_format
precision	src/lager_format.erl	/^precision([$.|Fmt], Args) ->$/;"	f	module:lager_format
prefixed_integer	src/lager_format.erl	/^prefixed_integer(Int, F, Adj, Base, Pad, Prefix, Lowercase)$/;"	f	module:lager_format
prepare_options	src/lager_trunc_io.erl	/^prepare_options([], Options) ->$/;"	f	module:lager_trunc_io
prepare_options	src/lager_trunc_io.erl	/^prepare_options([{depth, Depth}|T], Options) when is_integer(Depth) ->$/;"	f	module:lager_trunc_io
prepare_options	src/lager_trunc_io.erl	/^prepare_options([{force_strings, Bool}|T], Options) when is_boolean(Bool) ->$/;"	f	module:lager_trunc_io
prepare_options	src/lager_trunc_io.erl	/^prepare_options([{lists_as_strings, Bool}|T], Options) when is_boolean(Bool) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(<<>>, _Max, #print_options{depth=1}) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(<<>>, _Max, Options) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Atom, _Max, #print_options{force_strings=NoQuote}) when is_atom(Atom) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Bin, Max, _Options) when is_binary(Bin), Max < 2 ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Bin, _Max, #print_options{depth=1}) when is_binary(Bin) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Binary, 0, _Options) when is_bitstring(Binary) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Binary, Max, Options) when is_binary(Binary) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(BitString, Max, Options) when is_bitstring(BitString) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Float, _Max, _Options) when is_float(Float) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Fun, Max, _Options) when is_function(Fun) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Integer, _Max, _Options) when is_integer(Integer) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(List, Max, Options) when is_list(List) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Map, Max, Options) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Pid, _Max, _Options) when is_pid(Pid) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Port, _Max, _Options) when is_port(Port) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Ref, _Max, _Options) when is_reference(Ref) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Term, Max) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Term, Max, Options) when is_list(Options) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Term, _Max, #print_options{force_strings=true}) when not is_list(Term), not is_binary(Term), not is_atom(Term) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(Tuple, Max, Options) when is_tuple(Tuple) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(_, Max, _Options) when Max < 0 -> {"...", 3};$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print(_, _, #print_options{depth=0}) -> {"...", 3};$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print({'$lager_record', Name, Fields}, Max, Options) ->$/;"	f	module:lager_trunc_io
print	src/lager_trunc_io.erl	/^print({inline_bitstring, B}, _Max, _Options) when is_bitstring(B) ->$/;"	f	module:lager_trunc_io
print_bad_state	test/lager_test_backend.erl	/^print_bad_state() ->$/;"	f	module:lager_test_backend
print_bad_state	test/lager_test_backend.erl	/^print_bad_state(Sink) ->$/;"	f	module:lager_test_backend
print_options	src/lager_trunc_io.erl	/^-record(print_options, {$/;"	r
print_silly_list	src/error_logger_lager_h.erl	/^print_silly_list(L) ->$/;"	f	module:error_logger_lager_h
print_silly_list	src/error_logger_lager_h.erl	/^print_silly_list(L) when is_list(L) ->$/;"	f	module:error_logger_lager_h
print_silly_list	src/error_logger_lager_h.erl	/^print_silly_list([H|T], Fmt, Acc) ->$/;"	f	module:error_logger_lager_h
print_silly_list	src/error_logger_lager_h.erl	/^print_silly_list([], Fmt, Acc) ->$/;"	f	module:error_logger_lager_h
print_silly_list	src/error_logger_lager_h.erl	/^print_silly_list([{K,V}|T], Fmt, Acc) ->$/;"	f	module:error_logger_lager_h
print_state	test/lager_test_backend.erl	/^print_state() ->$/;"	f	module:lager_test_backend
print_state	test/lager_test_backend.erl	/^print_state(Sink) ->$/;"	f	module:lager_test_backend
print_terms_without_format_string_test	src/lager_trunc_io.erl	/^print_terms_without_format_string_test() ->$/;"	f	module:lager_trunc_io
print_val	src/error_logger_lager_h.erl	/^print_val(Val) ->$/;"	f	module:error_logger_lager_h
proc_lib_format	src/lager_stdlib.erl	/^proc_lib_format([OwnReport,LinkReport], FmtMaxBytes) ->$/;"	f	module:lager_stdlib
produce_n_error_logger_msgs	test/lager_test_backend.erl	/^produce_n_error_logger_msgs(N) ->$/;"	f	module:lager_test_backend
prop_equivalence	test/trunc_io_eqc.erl	/^prop_equivalence() ->$/;"	f	module:trunc_io_eqc
prop_format	test/trunc_io_eqc.erl	/^prop_format() ->$/;"	f	module:trunc_io_eqc
quote_strip_test	src/lager_trunc_io.erl	/^quote_strip_test() ->$/;"	f	module:lager_trunc_io
record_fields	src/lager_trunc_io.erl	/^record_fields([], _, _) ->$/;"	f	module:lager_trunc_io
record_fields	src/lager_trunc_io.erl	/^record_fields([{Field, Value}|T], Max, Options) ->$/;"	f	module:lager_trunc_io
record_fields	src/lager_trunc_io.erl	/^record_fields(_, Max, #print_options{depth=D}) when Max < 4; D == 0 ->$/;"	f	module:lager_trunc_io
reinstall_on_initial_failure_test_	src/lager_handler_watcher.erl	/^reinstall_on_initial_failure_test_() ->$/;"	f	module:lager_handler_watcher
reinstall_on_runtime_failure_test_	src/lager_handler_watcher.erl	/^reinstall_on_runtime_failure_test_() ->$/;"	f	module:lager_handler_watcher
rotate_all	src/lager.erl	/^rotate_all() -> $/;"	f	module:lager
rotate_file_fail_test	src/lager_util.erl	/^rotate_file_fail_test() ->$/;"	f	module:lager_util
rotate_file_test	src/lager_util.erl	/^rotate_file_test() ->$/;"	f	module:lager_util
rotate_handler	src/lager.erl	/^rotate_handler(Handler) ->$/;"	f	module:lager
rotate_handler	src/lager.erl	/^rotate_handler(Handler, Sink) ->$/;"	f	module:lager
rotate_handlers	src/lager.erl	/^rotate_handlers(Handlers) ->$/;"	f	module:lager
rotate_logfile	src/lager_util.erl	/^rotate_logfile(File, 0) ->$/;"	f	module:lager_util
rotate_logfile	src/lager_util.erl	/^rotate_logfile(File, 1) ->$/;"	f	module:lager_util
rotate_logfile	src/lager_util.erl	/^rotate_logfile(File, Count) ->$/;"	f	module:lager_util
rotate_sink	src/lager.erl	/^rotate_sink(Sink) ->$/;"	f	module:lager
rotate_test_	test/lager_rotate.erl	/^rotate_test_() ->$/;"	f	module:lager_rotate
rotation_calculation_test	src/lager_util.erl	/^rotation_calculation_test() ->$/;"	f	module:lager_util
rotation_test_	src/lager_file_backend.erl	/^rotation_test_() ->$/;"	f	module:lager_file_backend
safe	src/lager_trunc_io.erl	/^safe(What, Len) ->$/;"	f	module:lager_trunc_io
safe_format	src/lager.erl	/^safe_format(Fmt, Args, Limit) ->$/;"	f	module:lager
safe_format	src/lager.erl	/^safe_format(Fmt, Args, Limit, Options) ->$/;"	f	module:lager
safe_format_chop	src/lager.erl	/^safe_format_chop(Fmt, Args, Limit) ->$/;"	f	module:lager
safe_format_test	test/lager_test_backend.erl	/^safe_format_test() ->$/;"	f	module:lager_test_backend
sane_float_printing_test	src/lager_trunc_io.erl	/^sane_float_printing_test() ->$/;"	f	module:lager_trunc_io
sasl_limited_str	src/lager_crash_log.erl	/^sasl_limited_str(crash_report, Report, FmtMaxBytes) ->$/;"	f	module:lager_crash_log
sasl_limited_str	src/lager_crash_log.erl	/^sasl_limited_str(progress, Report, FmtMaxBytes) ->$/;"	f	module:lager_crash_log
sasl_limited_str	src/lager_crash_log.erl	/^sasl_limited_str(supervisor_report, Report, FmtMaxBytes) ->$/;"	f	module:lager_crash_log
sasl_type_to_report_head	src/lager_crash_log.erl	/^sasl_type_to_report_head(crash_report) ->$/;"	f	module:lager_crash_log
sasl_type_to_report_head	src/lager_crash_log.erl	/^sasl_type_to_report_head(progress) ->$/;"	f	module:lager_crash_log
sasl_type_to_report_head	src/lager_crash_log.erl	/^sasl_type_to_report_head(supervisor_report) ->$/;"	f	module:lager_crash_log
schedule_rotation	src/lager_crash_log.erl	/^schedule_rotation(Date) ->$/;"	f	module:lager_crash_log
schedule_rotation	src/lager_crash_log.erl	/^schedule_rotation(undefined) ->$/;"	f	module:lager_crash_log
schedule_rotation	src/lager_file_backend.erl	/^schedule_rotation(Name, Date) ->$/;"	f	module:lager_file_backend
schedule_rotation	src/lager_file_backend.erl	/^schedule_rotation(_, undefined) ->$/;"	f	module:lager_file_backend
sep	src/lager_stdlib.erl	/^sep(1, S) -> S;$/;"	f	module:lager_stdlib
sep	src/lager_stdlib.erl	/^sep(_, S) -> [$\\n | S].$/;"	f	module:lager_stdlib
set	src/lager_config.erl	/^set(Key, Value) ->$/;"	f	module:lager_config
set	src/lager_config.erl	/^set({Sink, Key}, Value) ->$/;"	f	module:lager_config
set_high_water	src/error_logger_lager_h.erl	/^set_high_water(N) ->$/;"	f	module:error_logger_lager_h
set_loghwm	src/lager.erl	/^set_loghwm(Handler, Hwm) when is_integer(Hwm) ->$/;"	f	module:lager
set_loghwm	src/lager.erl	/^set_loghwm(Sink, Handler, Hwm) when is_integer(Hwm) ->$/;"	f	module:lager
set_loghwm	src/lager.erl	/^set_loghwm(Sink, Handler, Ident, Hwm) when is_integer(Hwm) ->$/;"	f	module:lager
set_loglevel	src/lager.erl	/^set_loglevel(Handler, Ident, Level) when is_atom(Level) ->$/;"	f	module:lager
set_loglevel	src/lager.erl	/^set_loglevel(Handler, Level) when is_atom(Level) ->$/;"	f	module:lager
set_loglevel	src/lager.erl	/^set_loglevel(Sink, Handler, Ident, Level) when is_atom(Level) ->$/;"	f	module:lager
set_loglevel_test_	src/lager_console_backend.erl	/^set_loglevel_test_() ->$/;"	f	module:lager_console_backend
setup	test/lager_test_backend.erl	/^setup() ->$/;"	f	module:lager_test_backend
setup_sink	test/lager_test_backend.erl	/^setup_sink() ->$/;"	f	module:lager_test_backend
severity	src/lager_msg.erl	/^severity(Msg) ->$/;"	f	module:lager_msg
severity_as_int	src/lager_msg.erl	/^severity_as_int(Msg) ->$/;"	f	module:lager_msg
sink_name_test_	src/lager_util.erl	/^sink_name_test_() ->$/;"	f	module:lager_util
special_process	test/special_process.erl	/^-module(special_process).$/;"	m
start	src/lager.erl	/^start() -> start(lager).$/;"	f	module:lager
start	src/lager.erl	/^start(App) ->$/;"	f	module:lager
start	src/lager_app.erl	/^start() ->$/;"	f	module:lager_app
start	src/lager_app.erl	/^start(_StartType, _StartArgs) ->$/;"	f	module:lager_app
start	src/lager_crash_log.erl	/^start(Filename, MaxBytes, Size, Date, Count) ->$/;"	f	module:lager_crash_log
start	src/lager_handler_watcher.erl	/^start(Sink, Module, Config) ->$/;"	f	module:lager_handler_watcher
start	test/crash.erl	/^start() ->$/;"	f	module:crash
start	test/special_process.erl	/^start() ->$/;"	f	module:special_process
start_configured_trace	src/lager_app.erl	/^start_configured_trace({Handler, Filter, Level}) when is_atom(Level) ->$/;"	f	module:lager_app
start_configured_trace	src/lager_app.erl	/^start_configured_trace({Handler, Filter}) ->$/;"	f	module:lager_app
start_error_logger_handler	src/lager_app.erl	/^start_error_logger_handler(_, HWM, undefined) ->$/;"	f	module:lager_app
start_error_logger_handler	src/lager_app.erl	/^start_error_logger_handler(_, HWM, {ok, WhiteList}) ->$/;"	f	module:lager_app
start_error_logger_handler	src/lager_app.erl	/^start_error_logger_handler({ok, false}, _HWM, _Whitelist) ->$/;"	f	module:lager_app
start_handler	src/lager_app.erl	/^start_handler(Sink, Module, Config) ->$/;"	f	module:lager_app
start_handlers	src/lager_app.erl	/^start_handlers(Sink, Handlers) ->$/;"	f	module:lager_app
start_handlers	src/lager_app.erl	/^start_handlers(_Sink, Handlers) when not is_list(Handlers) ->$/;"	f	module:lager_app
start_handlers	src/lager_app.erl	/^start_handlers(_Sink, undefined) ->$/;"	f	module:lager_app
start_link	src/lager_crash_log.erl	/^start_link(Filename, MaxBytes, Size, Date, Count) ->$/;"	f	module:lager_crash_log
start_link	src/lager_handler_watcher.erl	/^start_link(Sink, Module, Config) ->$/;"	f	module:lager_handler_watcher
start_link	src/lager_handler_watcher_sup.erl	/^start_link() ->$/;"	f	module:lager_handler_watcher_sup
start_link	src/lager_sup.erl	/^start_link() ->$/;"	f	module:lager_sup
start_ok	src/lager.erl	/^start_ok(App, {error, Reason}) ->$/;"	f	module:lager
start_ok	src/lager.erl	/^start_ok(App, {error, {not_started, Dep}}) ->$/;"	f	module:lager
start_ok	src/lager.erl	/^start_ok(_App, ok) -> ok;$/;"	f	module:lager
start_ok	src/lager.erl	/^start_ok(_App, {error, {already_started, _App}}) -> ok;$/;"	f	module:lager
start_throttle	src/lager_app.erl	/^start_throttle(Sink, Threshold, Window) ->$/;"	f	module:lager_app
stash_record	src/lager_transform.erl	/^stash_record(Record) ->$/;"	f	module:lager_transform
state	src/error_logger_lager_h.erl	/^-record(state, { $/;"	r
state	src/lager_backend_throttle.erl	/^-record(state, {$/;"	r
state	src/lager_common_test_backend.erl	/^-record(state, {level :: {mask, integer()},$/;"	r
state	src/lager_console_backend.erl	/^-record(state, {level :: {'mask', integer()},$/;"	r
state	src/lager_crash_log.erl	/^-record(state, {$/;"	r
state	src/lager_file_backend.erl	/^-record(state, {$/;"	r
state	src/lager_handler_watcher.erl	/^-record(state, {$/;"	r
state	src/lager_manager_killer.erl	/^-record(state, {$/;"	r
state	test/crash.erl	/^-record(state, {$/;"	r
state	test/lager_slow_backend.erl	/^-record(state, {$/;"	r
state	test/lager_test_backend.erl	/^-record(state, {level :: list(), buffer :: list(), ignored :: term()}).$/;"	r
status	src/lager.erl	/^status() ->$/;"	f	module:lager
stop	src/lager_app.erl	/^stop(Handlers) ->$/;"	f	module:lager_app
stop_trace	src/lager.erl	/^stop_trace(Backend, Filter, Level) ->$/;"	f	module:lager
stop_trace	src/lager.erl	/^stop_trace({Backend, Filter, Level}) ->$/;"	f	module:lager
stop_trace_int	src/lager.erl	/^stop_trace_int({_Filter, _Level, Backend} = Trace, Sink) ->$/;"	f	module:lager
string	src/lager_format.erl	/^string(S, F, Adj, P, Pad) when F >= P ->$/;"	f	module:lager_format
string	src/lager_format.erl	/^string(S, F, Adj, none, Pad) ->$/;"	f	module:lager_format
string	src/lager_format.erl	/^string(S, none, _Adj, P, Pad) ->$/;"	f	module:lager_format
string	src/lager_format.erl	/^string(S, none, _Adj, none, _Pad) -> S;$/;"	f	module:lager_format
string_field	src/lager_format.erl	/^string_field(S, F, Adj, N, Pad) when N < F ->$/;"	f	module:lager_format
string_field	src/lager_format.erl	/^string_field(S, F, _Adj, N, _Pad) when N > F ->$/;"	f	module:lager_format
string_field	src/lager_format.erl	/^string_field(S, _, _, _, _) -> % N == F$/;"	f	module:lager_format
string_p	src/lager_stdlib.erl	/^string_p(Term) ->$/;"	f	module:lager_stdlib
string_p	src/lager_stdlib.erl	/^string_p([]) ->$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([$\\b|T]) -> string_p1(T);$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([$\\e|T]) -> string_p1(T);$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([$\\f|T]) -> string_p1(T);$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([$\\n|T]) -> string_p1(T);$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([$\\r|T]) -> string_p1(T);$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([$\\t|T]) -> string_p1(T);$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([$\\v|T]) -> string_p1(T);$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([H|T]) when is_integer(H), H >= $\\s, H < 256 ->$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([H|T]) when is_list(H) ->$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1([]) -> true;$/;"	f	module:lager_stdlib
string_p1	src/lager_stdlib.erl	/^string_p1(_) ->  false.$/;"	f	module:lager_stdlib
sup_get	src/lager_stdlib.erl	/^sup_get(Tag, Report) ->$/;"	f	module:lager_stdlib
supervisor_name	src/error_logger_lager_h.erl	/^supervisor_name(Name) -> Name.$/;"	f	module:error_logger_lager_h
supervisor_name	src/error_logger_lager_h.erl	/^supervisor_name({local, Name}) -> Name;$/;"	f	module:error_logger_lager_h
sync_error_logger	test/sync_error_logger.erl	/^-module(sync_error_logger).$/;"	m
t	src/lager_stdlib.erl	/^t(X) when is_integer(X) ->$/;"	f	module:lager_stdlib
t	src/lager_stdlib.erl	/^t(_) ->$/;"	f	module:lager_stdlib
t1	src/lager_stdlib.erl	/^t1(X)   -> X.$/;"	f	module:lager_stdlib
t1	src/lager_stdlib.erl	/^t1([X]) -> [$0,X];$/;"	f	module:lager_stdlib
term	src/lager_format.erl	/^term(T, F, Adj, P0, Pad) ->$/;"	f	module:lager_format
term	src/lager_format.erl	/^term(T, none, Adj, P, Pad) -> term(T, P, Adj, P, Pad);$/;"	f	module:lager_format
term	src/lager_format.erl	/^term(T, none, _Adj, none, _Pad) -> T;$/;"	f	module:lager_format
terminate	src/error_logger_lager_h.erl	/^terminate(_Reason, _State) ->$/;"	f	module:error_logger_lager_h
terminate	src/lager_backend_throttle.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_backend_throttle
terminate	src/lager_common_test_backend.erl	/^terminate(_Reason, #state{log=Logs}) ->$/;"	f	module:lager_common_test_backend
terminate	src/lager_console_backend.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_console_backend
terminate	src/lager_crash_log.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_crash_log
terminate	src/lager_file_backend.erl	/^terminate(_Reason, State) ->$/;"	f	module:lager_file_backend
terminate	src/lager_handler_watcher.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_handler_watcher
terminate	src/lager_manager_killer.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_manager_killer
terminate	test/crash.erl	/^terminate(_, _) ->$/;"	f	module:crash
terminate	test/lager_crash_backend.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_crash_backend
terminate	test/lager_slow_backend.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_slow_backend
terminate	test/lager_test_backend.erl	/^terminate(_Reason, _State) ->$/;"	f	module:lager_test_backend
test	src/lager_trunc_io.erl	/^test() ->$/;"	f	module:lager_trunc_io
test	src/lager_trunc_io.erl	/^test(Mod, Func) ->$/;"	f	module:lager_trunc_io
test	test/lager_test_backend.erl	/^-record(test, {attrs :: list(), format :: list(), args :: list()}).$/;"	r
test	test/trunc_io_eqc.erl	/^test() ->$/;"	f	module:trunc_io_eqc
test	test/trunc_io_eqc.erl	/^test(N) ->$/;"	f	module:trunc_io_eqc
test_body	test/lager_test_backend.erl	/^test_body(Expected, Actual) ->$/;"	f	module:lager_test_backend
test_get	src/lager_backend_throttle.erl	/^test_get(Key) ->$/;"	f	module:lager_backend_throttle
test_increment	src/lager_backend_throttle.erl	/^test_increment(Key) ->$/;"	f	module:lager_backend_throttle
throw:	test/pr_stacktrace_test.erl	/^throw:{test,exception}",$/;"	f	module:pr_stacktrace_test
timestamp	src/lager_msg.erl	/^timestamp(Msg) ->$/;"	f	module:lager_msg
trace	src/lager.erl	/^trace(Backend, Filter) ->$/;"	f	module:lager
trace	src/lager.erl	/^trace(Backend, Filter, Level) ->$/;"	f	module:lager
trace	src/lager.erl	/^trace({lager_file_backend, File}, Filter, Level) ->$/;"	f	module:lager
trace_acc	src/lager_util.erl	/^trace_acc(Query) ->$/;"	f	module:lager_util
trace_acc	src/lager_util.erl	/^trace_acc([], Acc) -> $/;"	f	module:lager_util
trace_acc	src/lager_util.erl	/^trace_acc([{Key, '!'}|T], Acc) ->$/;"	f	module:lager_util
trace_acc	src/lager_util.erl	/^trace_acc([{Key, '*'}|T], Acc) ->$/;"	f	module:lager_util
trace_acc	src/lager_util.erl	/^trace_acc([{Key, '<', Val}|T], Acc) ->$/;"	f	module:lager_util
trace_acc	src/lager_util.erl	/^trace_acc([{Key, '=', Val}|T], Acc) ->$/;"	f	module:lager_util
trace_acc	src/lager_util.erl	/^trace_acc([{Key, '>', Val}|T], Acc) ->$/;"	f	module:lager_util
trace_acc	src/lager_util.erl	/^trace_acc([{Key, Val}|T], Acc) ->$/;"	f	module:lager_util
trace_all	src/lager_util.erl	/^trace_all(Query) -> $/;"	f	module:lager_util
trace_any	src/lager_util.erl	/^trace_any(Query) -> $/;"	f	module:lager_util
trace_console	src/lager.erl	/^trace_console(Filter) ->$/;"	f	module:lager
trace_console	src/lager.erl	/^trace_console(Filter, Level) ->$/;"	f	module:lager
trace_file	src/lager.erl	/^trace_file(File, Filter) ->$/;"	f	module:lager
trace_file	src/lager.erl	/^trace_file(File, Filter, Level) when is_atom(Level) ->$/;"	f	module:lager
trace_file	src/lager.erl	/^trace_file(File, Filter, Level, Options) ->$/;"	f	module:lager
trace_file	src/lager.erl	/^trace_file(File, Filter, Options) when is_list(Options) ->$/;"	f	module:lager
trace_files_test_	src/lager_file_backend.erl	/^trace_files_test_() ->$/;"	f	module:lager_file_backend
trace_filter	src/lager_util.erl	/^trace_filter(Module, Query) when Query == none; Query == [] ->$/;"	f	module:lager_util
trace_filter	src/lager_util.erl	/^trace_filter(Module, Query) when is_list(Query) ->$/;"	f	module:lager_util
trace_filter	src/lager_util.erl	/^trace_filter(Query) ->$/;"	f	module:lager_util
transform_statement	src/lager_transform.erl	/^transform_statement(Stmt, Sinks) when is_list(Stmt) ->$/;"	f	module:lager_transform
transform_statement	src/lager_transform.erl	/^transform_statement(Stmt, Sinks) when is_tuple(Stmt) ->$/;"	f	module:lager_transform
transform_statement	src/lager_transform.erl	/^transform_statement(Stmt, _Sinks) ->$/;"	f	module:lager_transform
transform_statement	src/lager_transform.erl	/^transform_statement({call, Line, {remote, _Line1, {atom, _Line2, Module},$/;"	f	module:lager_transform
trunc_io_eqc	test/trunc_io_eqc.erl	/^-module(trunc_io_eqc).$/;"	m
tuple_contents	src/lager_trunc_io.erl	/^tuple_contents(Tuple, Max, Options) ->$/;"	f	module:lager_trunc_io
tuple_printing_test	src/lager_trunc_io.erl	/^tuple_printing_test() ->$/;"	f	module:lager_trunc_io
unicode_test	src/lager_trunc_io.erl	/^unicode_test() ->$/;"	f	module:lager_trunc_io
uniconv	src/lager_format.erl	/^uniconv(C) ->$/;"	f	module:lager_format
unprefixed_integer	src/lager_format.erl	/^unprefixed_integer(Int, F, Adj, Base, Pad, Lowercase)$/;"	f	module:lager_format
unsafe_format	src/lager.erl	/^unsafe_format(Fmt, Args) ->$/;"	f	module:lager
unsafe_format_test	test/lager_test_backend.erl	/^unsafe_format_test() ->$/;"	f	module:lager_test_backend
update_loglevel_config	src/lager.erl	/^update_loglevel_config(Sink) ->$/;"	f	module:lager
update_loglevel_config	src/lager.erl	/^update_loglevel_config(error_logger) ->$/;"	f	module:lager
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist(List) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([Other|_Tail], _Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{check_interval, CheckInt}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{count, Count}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{date, Date}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{file, File}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{formatter, Fmt}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{formatter_config, FmtCfg}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{high_water_mark, HighWaterMark}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{level, Level}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{size, Size}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{sync_interval, SyncInt}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{sync_on, Level}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_logfile_proplist	src/lager_file_backend.erl	/^validate_logfile_proplist([{sync_size, SyncSize}|Tail], Acc) ->$/;"	f	module:lager_file_backend
validate_loglevel	src/lager_file_backend.erl	/^validate_loglevel(Level) ->$/;"	f	module:lager_file_backend
validate_positive	src/lager_sup.erl	/^validate_positive(_Val, Default) ->$/;"	f	module:lager_sup
validate_positive	src/lager_sup.erl	/^validate_positive({ok, Val}, _Default) when is_integer(Val) andalso Val >= 0 ->$/;"	f	module:lager_sup
validate_trace	src/lager_util.erl	/^validate_trace(_) ->$/;"	f	module:lager_util
validate_trace	src/lager_util.erl	/^validate_trace({Filter, Level, Destination}) when is_tuple(Filter); is_list(Filter), is_atom(Level), is_atom(Destination) ->$/;"	f	module:lager_util
validate_trace	src/lager_util.erl	/^validate_trace({Filter, Level, {Destination, ID}}) when is_tuple(Filter); is_list(Filter), is_atom(Level), is_atom(Destination) ->$/;"	f	module:lager_util
validate_trace_filter	src/lager_util.erl	/^validate_trace_filter(Filter) ->$/;"	f	module:lager_util
validate_trace_filter	src/lager_util.erl	/^validate_trace_filter(Filter) when is_tuple(Filter), is_atom(element(1, Filter)) =:= false ->$/;"	f	module:lager_util
validate_trace_filters	src/lager.erl	/^validate_trace_filters(Filters, Level, Backend) ->$/;"	f	module:lager
wait_until	test/lager_manager_killer_test.erl	/^wait_until(Fun, Delay, Retries) ->$/;"	f	module:lager_manager_killer_test
wait_until	test/lager_manager_killer_test.erl	/^wait_until(_Fun, _Delay, 0) ->$/;"	f	module:lager_manager_killer_test
wait_until	test/lager_rotate.erl	/^wait_until(Fun, Retry) ->$/;"	f	module:lager_rotate
wait_until	test/lager_rotate.erl	/^wait_until(_Fun, 0) -> {error, too_many_retries};$/;"	f	module:lager_rotate
walk_ast	src/lager_transform.erl	/^walk_ast(Acc, [H|T]) ->$/;"	f	module:lager_transform
walk_ast	src/lager_transform.erl	/^walk_ast(Acc, []) ->$/;"	f	module:lager_transform
walk_ast	src/lager_transform.erl	/^walk_ast(Acc, [{attribute, _, module, Module}=H|T]) ->$/;"	f	module:lager_transform
walk_ast	src/lager_transform.erl	/^walk_ast(Acc, [{attribute, _, module, {Module, _PmodArgs}}=H|T]) ->$/;"	f	module:lager_transform
walk_ast	src/lager_transform.erl	/^walk_ast(Acc, [{attribute, _, record, {Name, Fields}}=H|T]) ->$/;"	f	module:lager_transform
walk_ast	src/lager_transform.erl	/^walk_ast(Acc, [{function, Line, Name, Arity, Clauses}|T]) ->$/;"	f	module:lager_transform
walk_body	src/lager_transform.erl	/^walk_body(Acc, [H|T]) ->$/;"	f	module:lager_transform
walk_body	src/lager_transform.erl	/^walk_body(Acc, []) ->$/;"	f	module:lager_transform
walk_clauses	src/lager_transform.erl	/^walk_clauses(Acc, []) ->$/;"	f	module:lager_transform
walk_clauses	src/lager_transform.erl	/^walk_clauses(Acc, [{clause, Line, Arguments, Guards, Body}|T]) ->$/;"	f	module:lager_transform
warning_msg	test/sync_error_logger.erl	/^warning_msg(Format) ->$/;"	f	module:sync_error_logger
warning_msg	test/sync_error_logger.erl	/^warning_msg(Format, Args) ->$/;"	f	module:sync_error_logger
warning_msg_tag	test/sync_error_logger.erl	/^warning_msg_tag() ->$/;"	f	module:sync_error_logger
warning_report	test/sync_error_logger.erl	/^warning_report(Report) ->$/;"	f	module:sync_error_logger
warning_report	test/sync_error_logger.erl	/^warning_report(Type, Report) ->$/;"	f	module:sync_error_logger
warning_report_tag	test/sync_error_logger.erl	/^warning_report_tag(Type) ->$/;"	f	module:sync_error_logger
write	src/lager_file_backend.erl	/^write(#state{name=Name, fd=FD, inode=Inode, flap=Flap, size=RotSize,$/;"	f	module:lager_file_backend
write_time	src/lager_stdlib.erl	/^write_time({utc,{{Y,Mo,D},{H,Mi,S}}},Type) ->$/;"	f	module:lager_stdlib
write_time	src/lager_stdlib.erl	/^write_time({{Y,Mo,D},{H,Mi,S}},Type) ->$/;"	f	module:lager_stdlib
zip	src/lager.erl	/^zip([FieldName|RecordFields], [FieldValue|Record], Module, Options, ToReturn) ->$/;"	f	module:lager
zip	src/lager.erl	/^zip([], [], _Module, _Compress, ToReturn) ->$/;"	f	module:lager
zzzz_gh280_crash	test/zzzz_gh280_crash.erl	/^-module(zzzz_gh280_crash).$/;"	m
