#! /bin/bash
ROOT=`cd $(dirname $0); pwd`
CONFDIR=$ROOT/config

# 定义erlang vm选项
ERL=/usr/local/bin/erl
POLL=true
ASYNC=8
SMP=true
ERL_PROCESSES=500000
CONNECT_ALL=true
DATETIME=`date "+%Y%m%d-%H%M%S"`
export ERL_CRASH_DUMP=$ROOT/erl_crash_$DATETIME.dump
export ERL_MAX_PORTS=102400
export ERL_MAX_ETS_TABLES=10000
export HOME=$ROOT
SYSTEM_CONF_FILE=$CONFDIR/system.config
GAME_CONF_FILE=$CONFDIR/game.config

# 运行的程序及控制文件
APP_MOD=main
APP_CTL=game_ctl
# define additional environment variables
EBINS="$ROOT/ebin"

SERVER_NAME=""              # 控制节点名
CONFIG_PATH="default"       # 配置文件路径
SYNC_CONFIG_PATH="default"     # 需同步配置文件路径
CODE_PATH="default"            # 代码路径
EXTRA_ARGS="erlang_beam"       # 外部参数
SERVER_IP="127.0.0.1"          # 服务器IP
SERVER_PORT="0"                # 服务器端口
SERVER_VERSION="default"       # 服务端版本号
CLIENT_VERSION="default"       # 前端版本号
UPDATE_VERSION="default"       # 更新版本
CREATE_DB="false"              # 是否新建DB

STATUS_SUCCESS=0    # 成功
STATUS_NORUN=1      # 未运行
STATUS_USAGE=2      # 使用错误
STATUS_BADRPC=3     # rpc调用错误
STATUS_ERROR=4      # 其它错误
STATUS_STARTING=5   # 正在开服中
STATUS_RUNNING=6    # 运行中
STATUS_STOPING=7    # 正在关服中

CTL_STATUS_NORUN=0
CTL_STATUS_STARTING=1
CTL_STATUS_RUNNING=2
CTL_STATUS_STOPING=3
CTL_STATUS_ERROR=4

# 开服失败信息
START_ERROR_CONFIG=1
START_ERROR_CODE_PATH=2
START_ERROR_CONN_FAIL=3
START_ERROR_STATE=4
START_ERROR_MISS_INFO=5

# 重新加载的系统数据
RELOAD_TYPE=code

# 打印错误
error() {
    echo -e "[1;41m[错误][`date +"%F %T"`][0m ${SERVER_ID}服[${ERLANG_NODE}]$1"
    exit 1
}

# 打印信息
echo2() {
    echo -e "[1;42m[操作][`date +"%F %T"`][0m ${SERVER_ID}服[${ERLANG_NODE}]$1"
}

# 打印信息(不换行)
echo2_n() {
    echo -n -e "[1;42m[操作][`date +"%F %T"`][0m ${SERVER_ID}服[${ERLANG_NODE}]$1"
}

# 打印警告
warn() {
    echo -e "[1;43m[警告][`date +"%F %T"`][0m ${SERVER_ID}服[${ERLANG_NODE}]$1"
}

# 获取内网ip
getip() {
    echo `LANG=en_US; ifconfig | grep 'inet addr:' | grep -v '127.0.0.1' | grep '192.*' | cut -d: -f 2 | awk '{print $1}'`
}

# 使用说明
usage ()
{
    echo ""
    echo "用法:"
    echo "$0 ACTION [OPTION]"
    echo "ACTION:"
    echo "  live            交互方式启动"
    echo "  start           后台方式启动"
    echo "  async_start     后台方式启动(异步)" 
    echo "  status          获取后台运行状态"
    echo "  attach          通过Erlang shell连接后台运行节点"
    echo "  stop            立即停止节点(同步)"
    echo "  restart         重启节点"
    echo "  reload          重新加载数据或代码"
    echo "  count           获取在线人数"
    echo "  version         获取版本信息"
    echo "  switch_db       切换游戏服数据"
    echo "  check_db        检查游戏服数据状态"
    echo "  start_server    开启服务器"
    echo "  batch_start     指量开启服务器"
    echo "  stop_server     关闭服务器"
    echo "  remove_server   移除服务节点"
    echo "  check_server    查看服务器状态"
    echo "  rpc_switch_db   切换数据库"
    echo "  rpc_check_db    查看数据库状态"
    echo "  rpc_switch_version   切换版本,更新用"
    echo "  rpc_check_version    查找版本信息"
    echo "  rpc_check_update     检查更新"
    echo "  list_server     查看列出服务器信息"
    echo "  list_node       查看列出节点信息"
    echo "  list_version    查看列出版本信息"
    echo "  rpc_count       查看在线玩家信息"
    echo "  list_db         查看列出数据库连接信息"
    echo "  list_update     查看列出更新信息"
    echo "  check_data      检查策划data数据"
    echo "  check_data_log  获取最新的策划data数据检测日志文件名"
    echo ""
    echo "OPTION:"
    echo "  -h, --help              显示本信息"
    echo "  -s, --smp=true          是否使用smp(true|false,默认为true)"
    echo "  -c, --cookie=Cookie     节点cookie(默认\"\")"
    echo "  -f, --conf=Conf         指明使用的配置文件(默认game.conf)"
    echo "  -r, --reload=Type       指明要reload的系统数据:code,config或者指定模块名称"
    echo "  -n, --name=Name         指明要管理的服务器名称"
    echo "  --config=ConfigFile     指明服务器需要配置目录路径"
    echo "  --sync_config=CodeFile  指明同步配置文件，远程控制时用"
    echo "  --code=CodePath         指明beam文件所在目录"
    echo "  --server_version=V      指明服务端版本"
    echo "  --client_version=V      指明前端版本"
    echo ""
}

# 修改ulimit
change_ulimit() {
    if ! ulimit -HSn 102400 2> /dev/null ; then
        ## error "请确保具有root权限"
        echo "请确保具有root权限"
    fi
}

# 查询运行中节点的信息
rpc() 
{
    $ERL \
      $NAME_FLAG ${CTL_NAME}_ctl@$HOST \
      -noinput \
      -pa $EBINS \
	  -config $SYSTEM_CONF_FILE \
      -setcookie ${COOKIE} \
      -s ${APP_CTL} -extra $ERLANG_NODE $@
}

# 打印rpc返回信息
print_rpc_return ()
{
    case $1 in
    $STATUS_SUCCESS) 
        echo ""
        ;;
    $STATUS_NORUN) 
        warn "未运行!"
        ;;
    $STATUS_USAGE) 
        error "命令不支持! $0 -h查看帮助"
        ;;
    $STATUS_BADRPC) 
        error "RPC发生错误"
        ;;
    $STATUS_ERROR) 
        error "请求发生错误"
        ;;
    $STATUS_STARTING) 
        echo2 "正在开服中"
        ;;
    $STATUS_RUNNING) 
        echo2 "运行中"
        ;;
    $STATUS_STOPING) 
        echo2 "正在停服中"
        ;;
    *)
        error "未知命令! $0 -h查看帮助"
    esac
    exit $1
}

# 查看data数据检测日志文件
check_data_log ()
{
    CHECKLOGDIR=$LOGDIR/check_data
    FILE=$(find $CHECKLOGDIR -maxdepth 1 | sort -r | head -n 1)
    echo "最新data数据检测日志文件名:$FILE"
}

# 检测data数据
check_data ()
{
    if is_data_ok; then
        echo "策划data数据存在问题"
        check_data_log
        return 1
    fi
    echo "策划data数据ok!"
    check_data_log
}

is_data_ok ()
{   
    if [ "$SERVER_TYPE" = "game" ]; then
        result=$?
        $ERL \
        -pa $EBINS \
        -noinput \
        -kernel error_logger silent \
        -eval "check_data:start()."
        result=$?
        if [ $result = 0 ]; then
            return 1
        fi
        return 0
    fi
    return 1
}

# 判断节点是否运行
is_started () 
{
    rpc status
    result=$?
    if [  "$result" = "$STATUS_RUNNING" ]; then
        return 0
    fi
    return $result
}

# 判断节点是否crash
is_crashed() 
{
    if [ -f ${ERL_CRASH_DUMP} ]; then
        return 0
    fi
    return 1
}

# start interactive server
live ()
{
    change_ulimit
    $ERL \
      $NAME_FLAG $ERLANG_NODE \
      -pa $EBINS \
	  -config $SYSTEM_CONF_FILE \
      -setcookie ${COOKIE} \
      -s ${APP_MOD} start \
      $ERLANG_OPTS --extra $ARGS "$@"
}

# 启动server
start ()
{
    change_ulimit
    ensure_log_dir
    if is_started; then
        warn "节点$ERLANG_NODE已经启动"
        exit 0
    fi
    #if is_data_ok; then
    #    warn "策划data数据有问题"
    #    exit 0
    #fi
    echo2_n "开始启动" 
    # 等待1秒钟
    sleep 1
    $ERL \
      $NAME_FLAG $ERLANG_NODE \
      -noinput -detached \
      -hidden \
      -pa $EBINS \
      -setcookie ${COOKIE} \
      -kernel error_logger silent \
      -sasl sasl_error_logger \{file,\"$SASL_LOG\"\} \
      -kernel inet_dist_listen_min 10000 inet_dist_listen_max 20000 \
      -s ${APP_MOD} start\
      $ERLANG_OPTS $ARGS "$@"
    
    if [ "$1" = "async" ]; then
        echo ""
        echo2 "启动中，请稍候通过$0 status检测"
        exit 0
    fi

    RETRY=0
    while true; do
        if [ $? -ne 0 ]; then
            echo ""
            error "启动失败:$?"
        else
            if is_started; then
                break
            fi
            if is_crashed; then
                echo ""
                error "启动失败,发生crash!"
            else
                let RETRY++
                echo -n "."
                sleep 1
            fi
        fi
    done
    echo ""
    echo2 "启动成功"
}

# 获取状态
status ()
{
    if is_started; then
        echo2 "运行中"
    else
        print_rpc_return $?
    fi  
}

# 连接到节点内
attach ()
{
    if ! is_started; then
        error "${SERVER_ID}服[$ERLANG_NODE]未启动"
    fi
    $ERL \
      $NAME_FLAG ${NAME}_attach@$HOST \
      -setcookie ${COOKIE} \
      -remsh $ERLANG_NODE \
      $ERLANG_OPTS $ARGS "$@"
}

# 停止节点
stop ()
{
    if rpc stop $@; then
        echo2 "停止"
    else
        print_rpc_return $?
    fi  
}

# 重启节点
restart ()
{
    if rpc restart; then
        echo2 "重启成功"
    else
        print_rpc_return $?
    fi  
}

# 重新加载
reload ()
{
    if rpc reload ${RELOAD_TYPE}; then
        echo2 "重新加载${RELOAD_TYPE}成功"
    else
        error "重新加载${RELOAD_TYPE}失败"
    fi  
}

# 获取在线人数
count ()
{
    if ! is_started; then
        echo 0
        exit 0
    fi
    rpc count
}


# 获取版本信息
version ()
{
    if ! is_started; then
        echo 0
        exit 0
    fi
    rpc version
}

# 切换数库
switch_db ()
{
    if ! is_started; then
        echo 0
        exit 0
    fi
    if rpc switch_db;then
        echo2 "切换数据库成功"
    else
        error "切换数据失败"
    fi
}

# 切换版本
rpc_switch_version ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
    if rpc rpc_switch_version $SERVER_IP $SERVER_PORT $SERVER_NAME $SERVER_VERSION $CLIENT_VERSION;then
        echo2 "切换版本成功"
    else
        error "切换版本失败"
    fi
}

# 数据库状态
rpc_check_version ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
    if rpc rpc_check_version $SERVER_IP $SERVER_PORT $SERVER_NAME $SERVER_VERSION $CLIENT_VERSION;then
        echo2 "版本检查成功"
    else
        error "版本不正确"
    fi

}

# 数据库状态
check_db ()
{
    if ! is_started; then
        echo 0
        exit 0
    fi
    if rpc check_db;then
        echo2 "数据库连接成功"
    else
        error "数据连接失败"
    fi
}



# 开启服务节点
start_server()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi

    rpc start_server $SERVER_IP $SERVER_PORT $SERVER_NAME $CONFIG_PATH $SYNC_CONFIG_PATH $CODE_PATH $SERVER_VERSION $CLIENT_VERSION $CREATE_DB $EXTRA_ARGS
    result=$?
    if [  "$result" = "$STATUS_SUCCESS" ]; then
        echo2 "指令发送成功"
    elif [  "$result" = "$START_ERROR_CONFIG" ]; then
        echo2 "失败，配置检查出错"
    elif [  "$result" = "$START_ERROR_CODE_PATH" ]; then
        echo2 "失败，代码路径不正确"
    elif [  "$result" = "$START_ERROR_CONN_FAIL" ]; then
        echo2 "失败，目标manager连接失败"
    elif [  "$result" = "$START_ERROR_STATE" ]; then
        echo2 "失败，游戏服为非关闭状态"
    elif [  "$result" = "$START_ERROR_CONFIG" ]; then
        echo2 "失败，游戏服为非关闭状态"
    else
        echo2 "服务[${SERVER_NAME}]错误"
    fi
    exit $result
}

# 开启服务节点
batch_start()
{
    if [ -z "$SERVER_NAME" ]; then
        error "服务器节点名称未指定"
    fi

    rpc batch_start $SERVER_IP $SERVER_PORT $CONFIG_PATH $CODE_PATH $SERVER_VERSION $CLIENT_VERSION $CREATE_DB $SERVER_NAME
    result=$?
    if [  "$result" = "$STATUS_SUCCESS" ]; then
        echo2 "指令发送成功"
    elif [  "$result" = "$START_ERROR_CONFIG" ]; then
        echo2 "失败，配置检查出错"
    elif [  "$result" = "$START_ERROR_CODE_PATH" ]; then
        echo2 "失败，代码路径不正确"
    elif [  "$result" = "$START_ERROR_CONN_FAIL" ]; then
        echo2 "失败，目标manager连接失败"
    elif [  "$result" = "$START_ERROR_STATE" ]; then
        echo2 "失败，游戏服为非关闭状态"
    elif [  "$result" = "$START_ERROR_CONFIG" ]; then
        echo2 "失败，游戏服为非关闭状态"
    else
        echo2 "服务[${SERVER_NAME}]错误"
    fi
    exit $result
}



# 停止服务节点
stop_server ()
{
    if [ -z "$SERVER_NAME" ]; then
        error "服务器节点名称未指定"
    fi
    
    if rpc stop_server $SERVER_IP $SERVER_PORT $SERVER_NAME; then
        echo2 "关闭服务[${SERVER_NAME}]指令发送成功"
        exit 0
    else
        error "关闭服务[${SERVER_NAME}]指令发送失败"
    fi
}

# 移除服务节点
remove_server ()
{
    if [ -z "$SERVER_NAME" ]; then
        error "服务器节点名称未指定"
    fi
    
    if rpc remove_server $SERVER_IP $SERVER_PORT $SERVER_NAME; then
        echo2 "移除服务[${SERVER_NAME}]指令发送成功"
        exit 0
    else
        error "移除服务[${SERVER_NAME}]指令发送失败,服务未关闭"
    fi
}


# 切换数库
rpc_switch_db ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
    if rpc rpc_switch_db $SERVER_IP $SERVER_PORT $SERVER_NAME $CONFIG_PATH $SYNC_CONFIG_PATH ;then
        echo2 "切换数据库成功"
        exit 0
    else
        error "切换数据库失败"
    fi
}

# 数据库状态
rpc_check_db ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
    if rpc rpc_check_db $SERVER_IP $SERVER_PORT $SERVER_NAME;then
        echo2 "数据库连接成功"
    else
        error "数据连接失败"
    fi
}

# 检查更新
rpc_check_update ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
    if rpc rpc_check_update $SERVER_IP $SERVER_PORT $SERVER_NAME $UPDATE_VERSION;then
        echo2 "检查更新成功"
    else
        error "检查更新失败"
    fi
}

list_update() 
{
    rpc list_update $SERVER_IP $SERVER_PORT
}

# 重新加载配置
reload_config ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
    if rpc reload_config $SERVER_IP $SERVER_PORT $SERVER_NAME $CONFIG_PATH $SYNC_CONFIG_PATH;then
        echo2 "重新加载配置成功"
    else
        error "重新加载配置失败"
    fi
}

# 查看节点状态
check_server ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
   
    rpc check_server $SERVER_IP $SERVER_PORT $SERVER_NAME
    result=$?
    if [  "$result" = "$CTL_STATUS_RUNNING" ]; then
        echo2 "服务[${SERVER_NAME}]运行中"
    elif [  "$result" = "$CTL_STATUS_STARTING" ]; then
        echo2 "服务[${SERVER_NAME}]正在开启"
    elif [  "$result" = "$CTL_STATUS_STOPING" ]; then
        echo2 "服务[${SERVER_NAME}]正在停止"
    elif [  "$result" = "$CTL_STATUS_NORUN" ]; then
        echo2 "服务[${SERVER_NAME}]未运行"
    else
        echo2 "服务[${SERVER_NAME}]错误"
    fi
    return $result
}

list_server ()
{
    rpc list_server $SERVER_IP $SERVER_PORT
}

list_node ()
{
    rpc list_node $SERVER_IP $SERVER_PORT
}

list_version ()
{
    rpc list_version $SERVER_IP $SERVER_PORT
}

rpc_count ()
{
    if [ -z $SERVER_NAME ]; then
        error "服务器节点名称未指定"
    fi
   
    rpc rpc_count $SERVER_IP $SERVER_PORT $SERVER_NAME
}

list_db ()
{
    rpc list_db $SERVER_IP $SERVER_PORT
}


# parse command line parameters
while [ $# -ne 0 ] ; do
    PARAM=$1
    shift
    case $PARAM in
        --) break ;;
        --cookie|-c) COOKIE=$1 ; shift ;;
        --conf|-f) 
            #GAME_CONF_FILE=$CONFDIR/${1##*/};
            GAME_CONF_FILE=$1;
            export GAME_CONF_FILE=${GAME_CONF_FILE}; 
            shift ;;
        --help|-h) usage; exit 0;;
        --smp|-s) SMP=$1; shift;;
        --reload|-r) RELOAD_TYPE=$@; break;;
        --name|-n) SERVER_NAME=$1 ; shift ;;
        --code) CODE_PATH=$1 ; shift ;;
        --config) CONFIG_PATH=$1 ; shift ;;
        --sync_config) SYNC_CONFIG_PATH=$1 ; shift ;;
        --server_version) SERVER_VERSION=$1 ; shift ;;
        --update_version) UPDATE_VERSION=$1 ; shift ;;
        --client_version) CLIENT_VERSION=$1 ; shift ;;
        --create_db) CREATE_DB=$1 ; shift ;;
        --extra_args) EXTRA_ARGS=$1 ; shift ;;
        --ip) SERVER_IP=$1 ; shift ;;
        --port) SERVER_PORT=$1 ; shift ;;
        *) ARGS="$ARGS $PARAM" ;;
    esac
done

# 获取server_id
SERVER_TYPE=`cat ${GAME_CONF_FILE}  | grep -ri 'server_type' | sed -e 's/{server_type,\s*\(.*\)}.*/\1/'`
SERVER_ID=`cat ${GAME_CONF_FILE}  | grep -ri 'server_id' | sed -e 's/{server_id,\s*\(.*\)}.*/\1/'`
PLATFORM_ID=`cat ${GAME_CONF_FILE}  | grep -ri 'platform' | sed -e 's/{platform,\s*\"\(.*\)\"}.*/\1/'`
SERVER_PREFIX=`cat ${GAME_CONF_FILE}  | grep -ri 'prefix' | sed -e 's/{prefix,\s*\(.*\)}.*/\1/'`
if [ "$SERVER_PREFIX" = "" ]; then
    SERVER_PREFIX="s"
fi
SERVER_ID=${PLATFORM_ID}_${SERVER_PREFIX}${SERVER_ID}

# 修改引用目录
if [ "$SERVER_TYPE" == "game" ] || [ "$SERVER_TYPE" == "merger" ] || [ "$SERVER_TYPE" == "across" ]; then
    EBINS="$ROOT/ebin $ROOT/deps/data_cn"
fi

# 节点名
ERLANG_NODE=${SERVER_TYPE}_${SERVER_ID}@localhost
COOKIE="node-cookie"

NAME=${ERLANG_NODE%%@*}
HOST=${ERLANG_NODE##*@}
TIMESTAMP=`date "+%Y%m%d-%H%M%S_%N"`
CTL_NAME=${NAME}"_"${TIMESTAMP}
NAME_FLAG=-name
[ "$ERLANG_NODE" = "${ERLANG_NODE%.*}" ] && NAME_FLAG=-sname
LOCAL_IP=$(getip)
if [ "$NAME_FLAG" = "-name" -a "$HOST" !=  "$LOCAL_IP" ]; then 
    error "节点名称:$ERLANG_NODE与本机ip:$LOCAL_IP不相符"
fi

if [ "$SMP" = "false" ]; then
    SMP=disable
else
    SMP=enable
fi
ERLANG_OPTS="-connect_all $CONNECT_ALL +K $POLL -smp $SMP +P $ERL_PROCESSES \
    +t 10485760 +fnu +hms 8192 +hmbs 8192 +zdbbl 81920 -v"

# 游戏生成的相关文件路径
LOGDIR=$ROOT/data
# 游戏错误日志的路径
ERRLOGDIR=$LOGDIR/${SERVER_TYPE}_$SERVER_ID/logs
CHECKLOGDIR=$LOGDIR/${SERVER_TYPE}_$SERVER_ID/check_logs
# makesure the logs dir exists
ensure_log_dir()
{
    if [ ! -d $ERRLOGDIR ]; then
        mkdir -p $ERRLOGDIR || (echo "make $ERRLOGDIR error!"; exit 1)
    fi
    SASL_LOG=$ERRLOGDIR/game_${SERVER_ID}_${DATETIME}.sasl
    ERROR_LOG=$ERRLOGDIR/game_${SERVER_ID}_${DATETIME}.log
}


case $ARGS in
    '') usage;;
    ' live') live;;
    ' start') start sync;;
    ' async_start') start async;;
    ' status') status;;
    ' attach') attach;;
    ' stop') stop 0;;
    ' restart') restart;;
    ' count') count;;
    ' reload') reload;;
    ' version') version;;
    ' switch_db') switch_db;;
    ' check_db') check_db;;
    ' check_data') check_data;;
    ' start_server') start_server;;
    ' batch_start') batch_start;;
    ' stop_server') stop_server;;
    ' remove_server') remove_server;;
    ' check_server') check_server;;
    ' reload_config') reload_config;;
    ' rpc_switch_db') rpc_switch_db;;
    ' rpc_check_db') rpc_check_db;;
    ' rpc_switch_version') rpc_switch_version;;
    ' rpc_check_version') rpc_check_version;;
    ' rpc_check_update') rpc_check_update;;
    ' list_server') list_server;;
    ' list_node') list_node;;
    ' list_version') list_version;;
    ' rpc_count') rpc_count;;
    ' list_db') list_db;;
    ' list_update') list_update;;
    *) usage; exit 1
esac
